// Script de test pour v√©rifier les dropdowns d'√©quipement
const API_BASE_URL = 'http://localhost:7000/api';

async function testDropdownsEquipements() {
  console.log('üß™ Test des dropdowns d\'√©quipement...\n');

  try {
    // Test 1: V√©rifier l'endpoint /TypeEquipements
    console.log('1Ô∏è‚É£ Test de l\'endpoint /TypeEquipements...');
    const typesResponse = await fetch(`${API_BASE_URL}/TypeEquipements`);
    
    if (typesResponse.ok) {
      const types = await typesResponse.json();
      console.log('‚úÖ Types d\'√©quipements r√©cup√©r√©s:', types);
      
      if (types.length > 0) {
        console.log('‚úÖ Le dropdown Type devrait maintenant afficher des donn√©es !');
        console.log('   - Types disponibles:', types.map(t => t.libelle).join(', '));
      } else {
        console.log('‚ö†Ô∏è Aucun type d\'√©quipement trouv√© dans la base de donn√©es');
      }
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des types:', typesResponse.status);
    }

    // Test 2: V√©rifier l'endpoint /StatutsEquipement
    console.log('\n2Ô∏è‚É£ Test de l\'endpoint /StatutsEquipement...');
    const statutsResponse = await fetch(`${API_BASE_URL}/StatutsEquipement`);
    
    if (statutsResponse.ok) {
      const statuts = await statutsResponse.json();
      console.log('‚úÖ Statuts d\'√©quipement r√©cup√©r√©s:', statuts);
      
      if (statuts.length > 0) {
        console.log('‚úÖ Le dropdown Statut devrait maintenant afficher des donn√©es !');
        console.log('   - Statuts disponibles:', statuts.map(s => s.libelle).join(', '));
      } else {
        console.log('‚ö†Ô∏è Aucun statut d\'√©quipement trouv√© dans la base de donn√©es');
      }
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des statuts:', statutsResponse.status);
    }

    // Test 3: V√©rifier l'endpoint /CCTs
    console.log('\n3Ô∏è‚É£ Test de l\'endpoint /CCTs...');
    const cctsResponse = await fetch(`${API_BASE_URL}/CCTs`);
    
    if (cctsResponse.ok) {
      const ccts = await cctsResponse.json();
      console.log('‚úÖ CCTs r√©cup√©r√©s:', ccts);
      
      if (ccts.length > 0) {
        console.log('‚úÖ Le dropdown CCT devrait maintenant afficher des donn√©es !');
        console.log('   - CCTs disponibles:', ccts.slice(0, 3).map(c => c.nom).join(', ') + (ccts.length > 3 ? '...' : ''));
      } else {
        console.log('‚ö†Ô∏è Aucun CCT trouv√© dans la base de donn√©es');
      }
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des CCTs:', cctsResponse.status);
    }

    // Test 4: V√©rifier l'endpoint /Equipements
    console.log('\n4Ô∏è‚É£ Test de l\'endpoint /Equipements...');
    const equipementsResponse = await fetch(`${API_BASE_URL}/Equipements`);
    
    if (equipementsResponse.ok) {
      const equipements = await equipementsResponse.json();
      console.log('‚úÖ √âquipements r√©cup√©r√©s:', equipements);
      
      if (equipements.length > 0) {
        console.log('‚úÖ La liste des √©quipements devrait maintenant afficher des donn√©es !');
        console.log('   - Nombre d\'√©quipements:', equipements.length);
      } else {
        console.log('‚ö†Ô∏è Aucun √©quipement trouv√© dans la base de donn√©es');
      }
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des √©quipements:', equipementsResponse.status);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Ex√©cuter le test
testDropdownsEquipements();
