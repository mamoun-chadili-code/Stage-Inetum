import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Grid,
  Typography,
  Divider,
  Tabs,
  Tab,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Card,
  CardContent,
  Box,
  Chip,
  Avatar,
  IconButton,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemIcon
} from '@mui/material';
import {
  Business as BusinessIcon,
  LocationOn as LocationIcon,
  Phone as PhoneIcon,
  Email as EmailIcon,
  Person as PersonIcon,
  Assignment as AssignmentIcon,
  History as HistoryIcon,
  Edit as EditIcon,
  Close as CloseIcon,
  DirectionsCar as CarIcon,
  Settings as SettingsIcon,
  CalendarToday as CalendarIcon,
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon,
  PrivacyTip as PrivacyTipIcon
} from '@mui/icons-material';
import { categorieLignesService } from '../../services/categorieLignesService';

export default function CCTDetailsModal({ open, onClose, cct, details, tab = 0, onTabChange, onEdit }) {
  const [categoriesLignes, setCategoriesLignes] = useState([]);
  const [loadingCategories, setLoadingCategories] = useState(false);

  // Charger les cat√©gories de lignes
  useEffect(() => {
    const loadCategories = async () => {
      if (open && details?.lignes?.length > 0) {
        setLoadingCategories(true);
        try {
          const categories = await categorieLignesService.getAll();
          setCategoriesLignes(categories);
        } catch (error) {
          console.error('Erreur lors du chargement des cat√©gories:', error);
        } finally {
          setLoadingCategories(false);
        }
      }
    };

    loadCategories();
  }, [open, details?.lignes]);

  if (!cct) return null;

  const formatDate = (dateString) => {
    if (!dateString) return '-';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('fr-FR');
    } catch (error) {
      return dateString;
    }
  };

  const getStatusColor = (status) => {
    if (!status) return '#757575';
    const statut = status.toLowerCase();
    if (statut.includes('activit√©') || statut.includes('active')) return '#4caf50';
    if (statut.includes('inactif')) return '#f44336';
    if (statut.includes('suspendu')) return '#ff9800';
    if (statut.includes('fermer') || statut.includes('ferm√©')) return '#9e9e9e';
    return '#757575';
  };

  // R√©cup√©rer le nom de la cat√©gorie par ID
  const getCategorieName = (categorieId) => {
    const categorie = categoriesLignes.find(cat => cat.id === categorieId);
    return categorie ? categorie.libelle : 'N/A';
  };

  // R√©cup√©rer les agents assign√©s au CCT
  const getAgentsForCCT = () => {
    console.log('üîç Debug - Structure compl√®te de details:', details);
    console.log('üîç Debug - Agents disponibles:', details?.agents);
    
    // Log d√©taill√© de chaque agent
    if (details?.agents) {
      details.agents.forEach((agent, index) => {
        console.log(`üîç Agent ${index + 1}:`, {
          id: agent.id,
          nom: agent.nom,
          prenom: agent.prenom,
          cin: agent.cin,
          numeroCAP: agent.numeroCAP,
          dateCAP: agent.dateCAP,
          tel: agent.tel,
          toutesProprietes: Object.keys(agent)
        });
      });
    }
    
    return details?.agents || [];
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="xl" fullWidth>
      <DialogTitle sx={{ 
        bgcolor: '#003366', 
        color: 'white',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center'
      }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <PrivacyTipIcon color="info" />
          <Typography variant="h6">D√©tails du Centre de Contr√¥le Technique</Typography>
        </Box>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.8)' }}>
            GESTION DES CCTS
          </Typography>
          <IconButton onClick={onClose} sx={{ color: 'white' }}>
            <CloseIcon />
          </IconButton>
        </Box>
      </DialogTitle>
      
      <DialogContent sx={{ p: 0 }}>
        <Box sx={{ p: 3 }}>
          {/* En-t√™te avec nom du CCT */}
          <Box sx={{ mb: 3, textAlign: 'center' }}>
            <Typography variant="h4" color="primary" gutterBottom>
              {cct.nom}
            </Typography>
            <Chip 
              label={cct.statut || 'Statut non d√©fini'} 
              sx={{
                backgroundColor: getStatusColor(cct.statut),
                color: 'white',
                fontWeight: 'bold',
                fontSize: '1rem',
                px: 2,
                '&:hover': {
                  opacity: 0.8
                }
              }}
            />
          </Box>

          {/* Onglets */}
          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
            <Tabs value={tab} onChange={onTabChange} aria-label="D√©tails du CCT">
              <Tab label="DETAILS DE CCT" icon={<BusinessIcon />} iconPosition="start" />
              <Tab label="LIGNES / AGENTS CCT" icon={<PersonIcon />} iconPosition="start" />
              <Tab label="HISTORIQUE CCT" icon={<HistoryIcon />} iconPosition="start" />
            </Tabs>
          </Box>

          {/* Contenu des onglets */}
          {tab === 0 && (
            <Box>
              {/* Section 1: Informations principales (2 colonnes √©quilibr√©es) */}
              <Grid container spacing={3} sx={{ mb: 3 }}>
                {/* Colonne gauche: Informations d'identification */}
                <Grid item xs={12} md={6}>
                  <Card elevation={2} sx={{ height: '100%' }}>
                    <CardContent>
                      <Typography variant="h6" color="primary" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
                        <AssignmentIcon />
                        Informations d'identification
                      </Typography>
                      <Grid container spacing={2}>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>CCT</Typography>
                          <Typography variant="body1" fontWeight="bold">{cct.nom || '-'}</Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Agr√©ment</Typography>
                          <Typography variant="body1" fontWeight="bold">{cct.agrement || '-'}</Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Date agr√©ment</Typography>
                          <Typography variant="body1">{formatDate(cct.dateAgrement) || '-'}</Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Statut</Typography>
                          <Typography variant="body1">{cct.statut || '-'}</Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Cat√©gorie</Typography>
                          <Typography variant="body1">{cct.categorie || '-'}</Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Type</Typography>
                          <Typography variant="body1">{cct.type || '-'}</Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>R√©seau</Typography>
                          <Typography variant="body1">{cct.reseau || '-'}</Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Cadre d'autorisation</Typography>
                          <Typography variant="body1">{cct.cadreAutorisation || '-'}</Typography>
                        </Grid>
                      </Grid>
                    </CardContent>
                  </Card>
                </Grid>

                {/* Colonne droite: Informations de contact */}
                <Grid item xs={12} md={6}>
                  <Card elevation={2} sx={{ height: '100%' }}>
                    <CardContent>
                      <Typography variant="h6" color="primary" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
                        <PhoneIcon />
                        Informations de contact
                      </Typography>
                      <Grid container spacing={2}>
                        <Grid item xs={12}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Adresse si√®ge</Typography>
                          <Typography variant="body1">{cct.adresseSiege || '-'}</Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>T√©l√©phone</Typography>
                          <Typography variant="body1">{cct.tel || '-'}</Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Fax</Typography>
                          <Typography variant="body1">{cct.fax || '-'}</Typography>
                        </Grid>
                        <Grid item xs={12}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Email</Typography>
                          <Typography variant="body1">{cct.mail || '-'}</Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>ICE</Typography>
                          <Typography variant="body1">{cct.ice || '-'}</Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Id. Fiscal</Typography>
                          <Typography variant="body1">{cct.idFiscal || '-'}</Typography>
                        </Grid>
                      </Grid>
                    </CardContent>
                  </Card>
                </Grid>
              </Grid>

              {/* Section 2: Informations g√©ographiques (pleine largeur) */}
              <Grid container spacing={3} sx={{ mb: 3 }}>
                <Grid item xs={12}>
                  <Card elevation={2}>
                    <CardContent>
                      <Typography variant="h6" color="primary" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
                        <LocationIcon />
                        Informations g√©ographiques
                      </Typography>
                      <Grid container spacing={3}>
                        <Grid item xs={12} md={3}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>R√©gion</Typography>
                          <Typography variant="body1" fontWeight="bold">{cct.region || '-'}</Typography>
                        </Grid>
                        <Grid item xs={12} md={3}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Province</Typography>
                          <Typography variant="body1" fontWeight="bold">{cct.province || '-'}</Typography>
                        </Grid>
                        <Grid item xs={12} md={3}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Ville</Typography>
                          <Typography variant="body1" fontWeight="bold">{cct.ville || '-'}</Typography>
                        </Grid>
                        <Grid item xs={12} md={3}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Adresse domiciliation</Typography>
                          <Typography variant="body1">{cct.adresseDomiciliation || '-'}</Typography>
                        </Grid>
                        <Grid item xs={12}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Adresse CCT</Typography>
                          <Typography variant="body1" fontWeight="bold">{cct.adresseCCT || '-'}</Typography>
                        </Grid>
                        <Grid item xs={12} md={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Coordonn√©es GPS</Typography>
                          <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
                            <Box>
                              <Typography variant="caption" color="text.secondary">Latitude</Typography>
                              <Typography variant="body2" fontWeight="bold">{cct.latitude || '-'}</Typography>
                            </Box>
                            <Box>
                              <Typography variant="caption" color="text.secondary">Longitude</Typography>
                              <Typography variant="body2" fontWeight="bold">{cct.longitude || '-'}</Typography>
                            </Box>
                          </Box>
                        </Grid>
                      </Grid>
                    </CardContent>
                  </Card>
                </Grid>
              </Grid>

              {/* Section 3: Informations compl√©mentaires et dates (2 colonnes √©quilibr√©es) */}
              <Grid container spacing={3}>
                {/* Colonne gauche: Informations compl√©mentaires */}
                <Grid item xs={12} md={6}>
                  <Card elevation={2} sx={{ height: '100%' }}>
                    <CardContent>
                      <Typography variant="h6" color="primary" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
                        <SettingsIcon />
                        Informations compl√©mentaires
                      </Typography>
                      <Grid container spacing={2}>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Personne morale</Typography>
                          <Box>
                            {cct.isPersonneMorale ? (
                              <Chip label="Oui" color="success" size="small" icon={<CheckCircleIcon />} />
                            ) : (
                              <Chip label="Non" color="default" size="small" />
                            )}
                          </Box>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Engagements sp√©cifiques</Typography>
                          <Typography variant="body1">{cct.engagementSpecifique || '-'}</Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Quota VL</Typography>
                          <Typography variant="body1" fontWeight="bold" color="primary">{cct.quotaVL || '-'}</Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Quota PL</Typography>
                          <Typography variant="body1" fontWeight="bold" color="primary">{cct.quotaPL || '-'}</Typography>
                        </Grid>
                      </Grid>
                    </CardContent>
                  </Card>
                </Grid>

                {/* Colonne droite: Dates importantes */}
                <Grid item xs={12} md={6}>
                  <Card elevation={2} sx={{ height: '100%' }}>
                    <CardContent>
                      <Typography variant="h6" color="primary" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
                        <CalendarIcon />
                        Dates importantes
                      </Typography>
                      <Grid container spacing={2}>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Date statut</Typography>
                          <Typography variant="body1" fontWeight="bold">{formatDate(cct.dateStatut) || '-'}</Typography>
                        </Grid>
                        <Grid item xs={6}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Date ralliement</Typography>
                          <Typography variant="body1" fontWeight="bold">{formatDate(cct.dateRalliement) || '-'}</Typography>
                        </Grid>
                        <Grid item xs={12}>
                          <Typography variant="subtitle2" color="text.secondary" gutterBottom>Thumbprint certificat</Typography>
                          <Typography variant="body2" sx={{ fontFamily: 'monospace', fontSize: '0.8rem', wordBreak: 'break-all' }}>
                            {cct.thumbprintCertificat || '-'}
                          </Typography>
                        </Grid>
                      </Grid>
                    </CardContent>
                  </Card>
                </Grid>
              </Grid>
            </Box>
          )}

          {/* Onglet Lignes/Agents CCT */}
          {tab === 1 && (
            <Card elevation={2}>
              <CardContent>
                <Typography variant="h6" color="primary" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 3 }}>
                  <PersonIcon />
                  LIGNES / AGENTS CCT
                </Typography>
                
                {details?.lignes && details.lignes.length > 0 ? (
                  <Table>
                    <TableHead>
                      <TableRow sx={{ bgcolor: '#f5f5f5' }}>
                        <TableCell sx={{ fontWeight: 'bold' }}>Num ligne</TableCell>
                        <TableCell sx={{ fontWeight: 'bold' }}>Cat√©gorie</TableCell>
                        <TableCell sx={{ fontWeight: 'bold' }}>Nom Agent</TableCell>
                        <TableCell sx={{ fontWeight: 'bold' }}>CIN</TableCell>
                        <TableCell sx={{ fontWeight: 'bold' }}>CAP</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {details.lignes.map((ligne, index) => {
                        const agents = getAgentsForCCT();
                        return (
                          <TableRow key={index} hover>
                            <TableCell>{ligne.numeroLigne || index + 1}</TableCell>
                            <TableCell>
                              <Chip 
                                label={getCategorieName(ligne.categorieId)} 
                                size="small" 
                                color="primary" 
                                variant="outlined"
                              />
                            </TableCell>
                            <TableCell>
                              {agents.length > 0 ? (
                                <Box>
                                  {agents.map((agent, agentIndex) => (
                                    <Typography key={agentIndex} variant="body2">
                                      {agent.prenom} {agent.nom}
                                    </Typography>
                                  ))}
                                </Box>
                              ) : '-'}
                            </TableCell>
                            <TableCell>
                              {agents.length > 0 ? (
                                <Box>
                                  {agents.map((agent, agentIndex) => (
                                    <Typography key={agentIndex} variant="body2">
                                      {agent.cin || '-'}
                                    </Typography>
                                  ))}
                                </Box>
                              ) : '-'}
                            </TableCell>
                            <TableCell>
                              {agents.length > 0 ? (
                                <Box>
                                  {agents.map((agent, agentIndex) => (
                                    <Typography key={agentIndex} variant="body2">
                                      {agent.numeroCAP || agent['numeroCAP'] || 'N/A'}
                                    </Typography>
                                  ))}
                                </Box>
                              ) : '-'}
                            </TableCell>
                          </TableRow>
                        );
                      })}
                    </TableBody>
                  </Table>
                ) : (
                  <Box sx={{ textAlign: 'center', py: 4 }}>
                    <PersonIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />
                    <Typography variant="h6" color="text.secondary">
                      Aucune ligne/agent trouv√©
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      Ce CCT n'a pas encore de lignes ou d'agents associ√©s.
                    </Typography>
                  </Box>
                )}
              </CardContent>
            </Card>
          )}

          {/* Onglet Historique CCT */}
          {tab === 2 && (
            <Card elevation={2}>
              <CardContent>
                <Typography variant="h6" color="primary" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 3 }}>
                  <HistoryIcon />
                  HISTORIQUE CCT
                </Typography>
                
                {details?.historique && details.historique.length > 0 ? (
                  <Table>
                    <TableHead>
                      <TableRow sx={{ bgcolor: '#f5f5f5' }}>
                        <TableCell sx={{ fontWeight: 'bold' }}>CCT</TableCell>
                        <TableCell sx={{ fontWeight: 'bold' }}>R√©seau</TableCell>
                        <TableCell sx={{ fontWeight: 'bold' }}>Date d√©but</TableCell>
                        <TableCell sx={{ fontWeight: 'bold' }}>Date fin</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {details.historique.map((hist, index) => (
                        <TableRow key={index} hover>
                          <TableCell>{hist.cctNom || cct.nom}</TableCell>
                          <TableCell>{hist.reseauNom || '-'}</TableCell>
                          <TableCell>{formatDate(hist.dateDebut) || '-'}</TableCell>
                          <TableCell>{formatDate(hist.dateFin) || '-'}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                ) : (
                  <Box sx={{ textAlign: 'center', py: 4 }}>
                    <HistoryIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />
                    <Typography variant="h6" color="text.secondary">
                      Aucun historique trouv√©
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      Ce CCT n'a pas encore d'historique de ralliement.
                    </Typography>
                  </Box>
                )}
              </CardContent>
            </Card>
          )}
        </Box>
      </DialogContent>
      
      <DialogActions sx={{ p: 3, bgcolor: '#f5f5f5' }}>
        <Button
          onClick={onEdit}
          variant="contained"
          startIcon={<EditIcon />}
          sx={{ 
            bgcolor: '#17657D',
            '&:hover': {
              bgcolor: '#0F4A5A'
            }
          }}
        >
          Saisir
        </Button>
        <Button
          onClick={onClose}
          variant="outlined"
          sx={{ 
            minWidth: 120,
            borderColor: '#17657D',
            color: '#17657D',
            '&:hover': {
              borderColor: '#0F4A5A',
              backgroundColor: 'rgba(23, 101, 125, 0.04)'
            }
          }}
        >
          Fermer
        </Button>
      </DialogActions>
    </Dialog>
  );
} 