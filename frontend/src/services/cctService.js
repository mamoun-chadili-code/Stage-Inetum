import api from './api';

// Fonction pour formater les dates
const formatDate = (dateString) => {
  if (!dateString || dateString === '') return null;
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return null;
    // Retourner l'objet Date directement pour le backend
    return date;
  } catch (error) {
    console.warn('Erreur de formatage de date:', dateString, error);
    return null;
  }
};

const cctService = {
  // Fonction utilitaire pour nettoyer les objets complexes
  cleanComplexObjects(data) {
    try {
      console.log('=== NETTOYAGE DES OBJETS COMPLEXES ===');
      console.log('Donn√©es avant nettoyage:', data);
      console.log('Type des donn√©es:', typeof data);
      console.log('Cl√©s des donn√©es:', Object.keys(data));
      
      if (!data || typeof data !== 'object') {
        console.log('‚ùå Donn√©es invalides pour le nettoyage');
        return data;
      }
      
      const cleaned = { ...data };
      
      // Liste des champs qui doivent √™tre des IDs, pas des objets
      const idFields = [
        'categorie', 'statut', 'reseau', 'region', 'province', 'ville',
        'cadreAutorisation', 'type', 'agents', 'lignes', 'formations',
        'equipements', 'decisions', 'chefsCentres'
      ];
      
      console.log('Champs √† traiter:', idFields);
      
      idFields.forEach(field => {
        console.log(`\n--- Traitement du champ: ${field} ---`);
        console.log(`Valeur actuelle:`, cleaned[field]);
        console.log(`Type:`, typeof cleaned[field]);
        console.log(`Est un objet:`, cleaned[field] && typeof cleaned[field] === 'object');
        console.log(`Est un tableau:`, Array.isArray(cleaned[field]));
        
        if (cleaned[field] && typeof cleaned[field] === 'object') {
          if (cleaned[field].id !== undefined) {
            // Remplacer l'objet par son ID
            const newFieldName = `${field}Id`;
            cleaned[newFieldName] = cleaned[field].id;
            delete cleaned[field];
            console.log(`  ‚úÖ ${field} ‚Üí ${newFieldName}: ${cleaned[newFieldName]}`);
          } else if (Array.isArray(cleaned[field])) {
            // Pour les tableaux, les vider ou les supprimer
            if (cleaned[field].length === 0) {
              delete cleaned[field];
              console.log(`  üóëÔ∏è ${field} (tableau vide) supprim√©`);
            } else {
              // Garder seulement les IDs des √©l√©ments du tableau
              const ids = cleaned[field]
                .filter(item => item && item.id !== undefined)
                .map(item => item.id);
              cleaned[field] = ids;
              console.log(`  üîÑ ${field} ‚Üí tableau d'IDs:`, ids);
            }
          } else {
            console.log(`  ‚ö†Ô∏è ${field}: objet sans ID, supprim√©`);
            delete cleaned[field];
          }
        } else {
          console.log(`  ‚ÑπÔ∏è ${field}: pas un objet, ignor√©`);
        }
      });
      
      console.log('\n=== DONN√âES APR√àS NETTOYAGE ===');
      console.log('Donn√©es nettoy√©es:', cleaned);
      console.log('Cl√©s apr√®s nettoyage:', Object.keys(cleaned));
      
      return cleaned;
    } catch (error) {
      console.error('‚ùå ERREUR dans cleanComplexObjects:', error);
      console.error('Stack trace:', error.stack);
      return data; // Retourner les donn√©es originales en cas d'erreur
    }
  },

  // Fonction de validation et nettoyage des donn√©es
  validateAndCleanData(data) {
    console.log('=== VALIDATION DES DONN√âES ===');
    console.log('Donn√©es re√ßues:', data);
    
    const cleaned = {};
    
    // Champs obligatoires selon CCTUpdateDto (sauf 'id' pour la cr√©ation)
    const requiredFields = {
      // id: { type: 'number' },           // ‚ùå ID NON OBLIGATOIRE pour la cr√©ation
      nom: { type: 'string' },
      agrement: { type: 'string' },
      dateAgrement: { type: 'date' },
      categorieId: { type: 'number' },
      statutId: { type: 'number' },
      dateStatut: { type: 'date' },
      reseauId: { type: 'number' },
      dateRalliement: { type: 'date' },
      adresseCCT: { type: 'string' },
      latitude: { type: 'string' },
      longitude: { type: 'string' },
      villeId: { type: 'number' },
      tel: { type: 'string' },
      cadreAutorisationId: { type: 'number' },
      typeId: { type: 'number' },
      quotaVL: { type: 'number' }
    };
    
    // Champs optionnels selon CCTUpdateDto
    const optionalFields = {
      adresseSiege: { type: 'string' },
      adresseDomiciliation: { type: 'string' },
      fax: { type: 'string' },
      mail: { type: 'string' },
      ice: { type: 'string' },
      idFiscal: { type: 'string' },
      engagementSpecifique: { type: 'string' },
      isPersonneMorale: { type: 'boolean' },
      quotaPL: { type: 'number' },
      provinceId: { type: 'number' },
      regionId: { type: 'number' },
      thumbprintCertificat: { type: 'string' }
    };
    
    // Traiter les champs obligatoires
    Object.entries(requiredFields).forEach(([field, config]) => {
      console.log(`\n--- Traitement du champ OBLIGATOIRE: ${field} ---`);
      let value = data[field];
      console.log(`Valeur re√ßue:`, value);
      console.log(`Type re√ßu:`, typeof value);
      
      // Extraire l'ID si c'est un objet
      if (value && typeof value === 'object' && value.id !== undefined) {
        console.log(`üîÑ ${field} est un objet, extraction de l'ID:`, value.id);
        value = value.id;
      }
      
      // V√©rifier si le champ est pr√©sent et non vide
      if (value === null || value === undefined || value === '') {
        console.log(`‚ùå ${field} est obligatoire mais vide`);
        throw new Error(`Le champ ${field} est obligatoire`);
      }
      
      // Valider le type
      if (config.type === 'number' && isNaN(Number(value))) {
        console.log(`‚ùå ${field} doit √™tre un nombre`);
        throw new Error(`Le champ ${field} doit √™tre un nombre`);
      }
      
      if (config.type === 'date' && !(value instanceof Date) && isNaN(Date.parse(value))) {
        console.log(`‚ùå ${field} doit √™tre une date valide`);
        throw new Error(`Le champ ${field} doit √™tre une date valide`);
      }
      
      if (config.type === 'boolean' && typeof value !== 'boolean') {
        console.log(`‚ùå ${field} doit √™tre un bool√©en`);
        throw new Error(`Le champ ${field} doit √™tre un bool√©en`);
      }
      
      // Ajouter le champ nettoy√©
      cleaned[field] = value;
      console.log(`‚úÖ ${field} valid√© et ajout√©:`, value);
    });
    
    // Traiter les champs optionnels
    Object.entries(optionalFields).forEach(([field, config]) => {
      let value = data[field];
      
      // Extraire l'ID si c'est un objet
      if (value && typeof value === 'object' && value.id !== undefined) {
        console.log(`üîÑ ${field} optionnel est un objet, extraction de l'ID:`, value.id);
        value = value.id;
      }
      
      // Si le champ est pr√©sent, le valider
      if (value !== null && value !== undefined && value !== '') {
        // Validation de type pour les champs optionnels
        if (config.type === 'number' && isNaN(Number(value))) {
          console.log(`‚ö†Ô∏è ${field} ignor√© (type invalide):`, value);
          return;
        }
        
        if (config.type === 'date' && !(value instanceof Date) && isNaN(Date.parse(value))) {
          console.log(`‚ö†Ô∏è ${field} ignor√© (date invalide):`, value);
          return;
        }
        
        if (config.type === 'boolean' && typeof value !== 'boolean') {
          console.log(`‚ö†Ô∏è ${field} ignor√© (bool√©en invalide):`, value);
          return;
        }
        
        cleaned[field] = value;
        console.log(`‚úÖ ${field} optionnel ajout√©:`, value);
      } else {
        console.log(`‚ÑπÔ∏è ${field} optionnel ignor√© (vide)`);
      }
    });
    
    // Ajouter l'ID seulement s'il est pr√©sent (pour la modification)
    if (data.id !== null && data.id !== undefined && data.id !== '') {
      cleaned.id = parseInt(data.id);
      console.log(`‚úÖ ID ajout√© pour modification:`, cleaned.id);
    } else {
      console.log(`‚ÑπÔ∏è Pas d'ID - mode cr√©ation`);
    }
    
    console.log('\n=== DONN√âES VALID√âES ET NETTOY√âES ===');
    console.log('Donn√©es finales:', cleaned);
    console.log('Cl√©s finales:', Object.keys(cleaned));
    console.log('Total des champs:', Object.keys(cleaned).length);
    
    console.log('\n=== V√âRIFICATION FINALE DES TYPES ===');
    Object.entries(cleaned).forEach(([field, value]) => {
      console.log(`${field}: ${value} (${typeof value})`);
    });
    
    return cleaned;
  },

  // R√©cup√©rer tous les CCTs pour les dropdowns
  async getCCTsForDropdown() {
    try {
      const response = await api.get('/CCTs', {
        params: {
          page: 1,
          pageSize: 1000 // R√©cup√©rer tous les CCTs
        }
      });
      
      // Transformer les donn√©es pour le dropdown
      return response.data.map(cct => ({
        id: cct.id,
        nom: cct.nom,
        agrement: cct.agrement
      }));
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des CCTs:', error);
      throw error;
    }
  },

  // R√©cup√©rer tous les CCTs (alias pour compatibilit√©)
  async getAllCCTs() {
    return this.getCCTsForDropdown();
  },

  // R√©cup√©rer un CCT par ID
  async getCCTById(id) {
    try {
      const response = await api.get(`/CCTs/${id}`);
      return response;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration du CCT:', error);
      throw error;
    }
  },

  // Alias pour getCCTById (pour compatibilit√©)
  getCCT: async function(id) {
    return this.getCCTById(id);
  },

  // R√©cup√©rer tous les CCTs avec pagination
  async getCCTs(params = {}, page = 1, pageSize = 5) {
    try {
      const response = await api.get('/CCTs', {
        params: {
          ...params,
          page,
          pageSize
        }
      });
      
      // Extraire les headers de pagination
      const totalCount = parseInt(response.headers['x-total-count'] || '0');
      const pageCount = parseInt(response.headers['x-page-count'] || '1');
      
      return {
        data: response.data,
        pagination: {
          totalCount,
          pageCount,
          currentPage: page,
          pageSize
        }
      };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des CCTs:', error);
      return {
        data: [],
        pagination: {
          totalCount: 0,
          pageCount: 1,
          currentPage: 1,
          pageSize
        }
      };
    }
  },

  // Cr√©er un nouveau CCT
  async createCCT(data) {
    try {
      console.log('=== CR√âATION CCT ===');
      console.log('Donn√©es brutes re√ßues:', data);
      console.log('Type de donn√©es:', typeof data);
      console.log('Cl√©s des donn√©es:', Object.keys(data));
      
      // Nettoyer les objets complexes en premier
      const cleanedFromObjects = this.cleanComplexObjects(data);
      
      // Valider et nettoyer les donn√©es
      const cleanedData = this.validateAndCleanData(cleanedFromObjects);
      
      console.log('Donn√©es nettoy√©es:', cleanedData);
      console.log('Type de donn√©es nettoy√©es:', typeof cleanedData);
      console.log('Cl√©s des donn√©es nettoy√©es:', Object.keys(cleanedData));
      
      const response = await api.post('/CCTs', cleanedData);
      console.log('CCT cr√©√© avec succ√®s');
      return response;
    } catch (error) {
      console.error('=== ERREUR CR√âATION CCT ===');
      console.error('Type d\'erreur:', typeof error);
      console.error('Message d\'erreur:', error.message);
      console.error('Stack trace:', error.stack);
      
      // Gestion des erreurs de validation c√¥t√© client
      if (error.message && error.message.includes('est obligatoire')) {
        console.error('‚ùå Erreur de validation c√¥t√© client:', error.message);
        throw new Error(error.message);
      }
      
      // Gestion des erreurs de validation backend
      if (error.response?.data?.errors) {
        console.error('‚ùå Erreurs de validation backend:', error.response.data.errors);
        const errorDetails = Object.entries(error.response.data.errors)
          .map(([field, messages]) => `${field}: ${Array.isArray(messages) ? messages.join(', ') : messages}`)
          .join('; ');
        throw new Error(`Erreur de validation: ${errorDetails}`);
      }
      
      // Gestion des erreurs g√©n√©rales backend
      if (error.response?.data?.title) {
        console.error('‚ùå Erreur backend:', error.response.data.title);
        throw new Error(error.response.data.title);
      }
      
      // Gestion des erreurs de r√©seau
      if (error.request) {
        console.error('‚ùå Erreur de r√©seau:', error.request);
        throw new Error('Erreur de connexion au serveur');
      }
      
      // Gestion des erreurs inconnues
      console.error('‚ùå Erreur inconnue:', error);
      throw new Error('Erreur lors de la cr√©ation du CCT');
    }
  },

  // Mettre √† jour un CCT
  async updateCCT(id, data) {
    try {
      console.log('=== MISE √Ä JOUR CCT ===');
      console.log('ID:', id);
      console.log('Donn√©es brutes re√ßues:', data);
      console.log('Type de donn√©es:', typeof data);
      console.log('Cl√©s des donn√©es:', Object.keys(data));
      
      // TEST: V√©rifier que la fonction cleanComplexObjects est accessible
      console.log('=== TEST D\'ACC√àS √Ä LA FONCTION ===');
      console.log('cleanComplexObjects existe:', typeof this.cleanComplexObjects);
      console.log('cleanComplexObjects est une fonction:', typeof this.cleanComplexObjects === 'function');
      
      if (typeof this.cleanComplexObjects !== 'function') {
        console.error('‚ùå ERREUR: cleanComplexObjects n\'est pas une fonction !');
        console.error('Type re√ßu:', typeof this.cleanComplexObjects);
        throw new Error('Fonction de nettoyage non disponible');
      }
      
      // TEST: V√©rifier que la fonction cleanComplexObjects fonctionne
      console.log('=== TEST DE LA FONCTION CLEAN ===');
      const testData = {
        categorie: { id: 1, libelle: "Test" },
        statut: { id: 2, libelle: "Test" }
      };
      const testResult = this.cleanComplexObjects(testData);
      console.log('Test cleanComplexObjects:', testResult);
      
      // Nettoyer les objets complexes en premier
      const cleanedFromObjects = this.cleanComplexObjects(data);
      
      // Valider et nettoyer les donn√©es
      const cleanedData = this.validateAndCleanData(cleanedFromObjects);
      
      console.log('Donn√©es nettoy√©es:', cleanedData);
      console.log('Type de donn√©es nettoy√©es:', typeof cleanedData);
      console.log('Cl√©s des donn√©es nettoy√©es:', Object.keys(cleanedData));
      
      // V√©rifier que l'ID est valide
      if (!id || isNaN(parseInt(id))) {
        throw new Error('ID de CCT invalide');
      }
      
      // Log de la requ√™te avant envoi
      console.log('=== REQU√äTE PUT ===');
      console.log('URL:', `/CCTs/${id}`);
      console.log('Headers:', { 'Content-Type': 'application/json' });
      console.log('Donn√©es √† envoyer:', JSON.stringify(cleanedData, null, 2));
      
      const response = await api.put(`/CCTs/${id}`, cleanedData);
      
      console.log('CCT mis √† jour avec succ√®s');
      return response;
    } catch (error) {
      console.error('=== ERREUR MISE √Ä JOUR CCT ===');
      console.error('Type d\'erreur:', typeof error);
      console.error('Message d\'erreur:', error.message);
      console.error('Stack trace:', error.stack);
      
      // Logs d√©taill√©s de l'erreur
      if (error.response) {
        console.error('‚ùå R√©ponse d\'erreur re√ßue:');
        console.error('  Status:', error.response.status);
        console.error('  Status Text:', error.response.statusText);
        console.error('  Headers:', error.response.headers);
        console.error('  Data:', error.response.data);
        
        // Analyser le contenu de l'erreur
        if (error.response.data) {
          console.error('‚ùå Contenu de l\'erreur:');
          Object.keys(error.response.data).forEach(key => {
            console.error(`  ${key}:`, error.response.data[key]);
          });
        }
      }
      
      if (error.request) {
        console.error('‚ùå Requ√™te envoy√©e mais pas de r√©ponse:', error.request);
      }
      
      // Gestion des erreurs de validation c√¥t√© client
      if (error.message && error.message.includes('est obligatoire')) {
        console.error('‚ùå Erreur de validation c√¥t√© client:', error.message);
        throw error;
      }
      
      // Gestion des erreurs de validation backend
      if (error.response?.data?.errors) {
        console.error('‚ùå Erreurs de validation backend:', error.response.data.errors);
        const errorDetails = Object.entries(error.response.data.errors)
          .map(([field, messages]) => `${field}: ${Array.isArray(messages) ? messages.join(', ') : messages}`)
          .join('; ');
        throw new Error(`Erreur de validation: ${errorDetails}`);
      }
      
      // Gestion des erreurs g√©n√©rales backend
      if (error.response?.data?.title) {
        console.error('‚ùå Erreur backend:', error.response.data.title);
        throw new Error(error.response.data.title);
      }
      
      // Gestion des erreurs de r√©seau
      if (error.request) {
        console.error('‚ùå Erreur de r√©seau:', error.request);
        throw new Error('Erreur de connexion au serveur');
      }
      
      // Gestion des erreurs inconnues
      console.error('‚ùå Erreur inconnue:', error);
      throw new Error('Erreur lors de la mise √† jour du CCT');
    }
  },

  // Supprimer un CCT
  async deleteCCT(id) {
    try {
      console.log(`=== SUPPRESSION CCT ${id} ===`);
      
      // V√©rifier d'abord s'il y a des associations
      const hasAssociations = await this.checkCCTAssociations(id);
      
      if (hasAssociations) {
        const errorMessage = `Impossible de supprimer ce CCT car il est associ√© √† des entit√©s li√©es. 
        
üîç **Associations trouv√©es :**
${hasAssociations.agents > 0 ? `‚Ä¢ ${hasAssociations.agents} agent(s)` : ''}
${hasAssociations.chefsCentres > 0 ? `‚Ä¢ ${hasAssociations.chefsCentres} chef(s) de centre` : ''}
${hasAssociations.lignes > 0 ? `‚Ä¢ ${hasAssociations.lignes} ligne(s)` : ''}
${hasAssociations.equipements > 0 ? `‚Ä¢ ${hasAssociations.equipements} √©quipement(s)` : ''}
${hasAssociations.formations > 0 ? `‚Ä¢ ${hasAssociations.formations} formation(s)` : ''}
${hasAssociations.decisions > 0 ? `‚Ä¢ ${hasAssociations.decisions} d√©cision(s)` : ''}

üí° **Solutions possibles :**
1. Supprimer d'abord ces associations
2. D√©sactiver le CCT au lieu de le supprimer
3. Contacter l'administrateur syst√®me

‚ö†Ô∏è **Action requise :** G√©rer ces associations avant la suppression.`;
        
        throw new Error(errorMessage);
      }
      
      // Si pas d'associations, proc√©der √† la suppression
      const response = await api.delete(`/CCTs/${id}`);
      console.log('‚úÖ CCT supprim√© avec succ√®s:', response.data);
      return response.data;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression du CCT:', error);
      
      if (error.message.includes('associ√© √† des entit√©s li√©es')) {
        // Erreur d'associations - laisser l'erreur personnalis√©e
        throw error;
      } else if (error.response?.status === 500) {
        // Erreur backend de contrainte de cl√© √©trang√®re
        throw new Error(`Impossible de supprimer ce CCT car il est r√©f√©renc√© par d'autres donn√©es. 
        
üîç **Cause probable :** Contraintes de cl√©s √©trang√®res non respect√©es.

üí° **Solutions :**
1. V√©rifier les associations dans la base de donn√©es
2. Supprimer les r√©f√©rences avant la suppression
3. Utiliser la d√©sactivation au lieu de la suppression`);
      } else {
        // Autre type d'erreur
        throw new Error(`Erreur lors de la suppression : ${error.message || 'Erreur inconnue'}`);
      }
    }
  },

  // Supprimer un CCT avec d√©sassociation des agents (sans les supprimer)
  async deleteCCTWithDisassociation(cctId) {
    try {
      console.log(`=== SUPPRESSION CCT ${cctId} AVEC D√âSASSOCIATION ===`);
      
      // 1. V√©rifier les associations existantes
      const associations = await this.checkCCTAssociations(cctId);
      
      if (!associations || associations.error) {
        throw new Error('Erreur lors de la v√©rification des associations');
      }
      
      const totalAssociations = Object.values(associations).reduce((sum, count) => sum + count, 0);
      
      if (totalAssociations === 0) {
        // Pas d'associations, suppression directe
        console.log('‚úÖ Aucune association - suppression directe');
        return await this.deleteCCT(cctId);
      }
      
      console.log(`‚ö†Ô∏è ${totalAssociations} associations trouv√©es - d√©sassociation en cours...`);
      
      // 2. D√©sassocier les agents
      if (associations.agents > 0) {
        console.log(`üîÑ D√©sassociation de ${associations.agents} agent(s)...`);
        try {
          await this.disassociateCCTAgents(cctId);
        } catch (error) {
          console.warn(`‚ö†Ô∏è Erreur lors de la d√©sassociation des agents: ${error.message}`);
          // Continuer malgr√© l'erreur
        }
      }
      
      // 3. D√©sassocier les chefs de centre
      if (associations.chefsCentres > 0) {
        console.log(`üîÑ D√©sassociation de ${associations.chefsCentres} chef(s) de centre...`);
        try {
          const result = await this.disassociateCCTChefsCentres(cctId);
          if (!result.success) {
            console.warn(`‚ö†Ô∏è D√©sassociation des chefs de centre partiellement √©chou√©e: ${result.message}`);
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è Erreur lors de la d√©sassociation des chefs de centre: ${error.message}`);
          // Continuer malgr√© l'erreur
        }
      }
      
      // 4. D√©sassocier les lignes
      if (associations.lignes > 0) {
        console.log(`üîÑ D√©sassociation de ${associations.lignes} ligne(s)...`);
        try {
          await this.disassociateCCTLignes(cctId);
        } catch (error) {
          console.warn(`‚ö†Ô∏è Erreur lors de la d√©sassociation des lignes: ${error.message}`);
          // Continuer malgr√© l'erreur
        }
      }
      
      // 5. D√©sassocier les √©quipements
      if (associations.equipements > 0) {
        console.log(`üîÑ D√©sassociation de ${associations.equipements} √©quipement(s)...`);
        try {
          await this.disassociateCCTEquipements(cctId);
        } catch (error) {
          console.warn(`‚ö†Ô∏è Erreur lors de la d√©sassociation des √©quipements: ${error.message}`);
          // Continuer malgr√© l'erreur
        }
      }
      
      // 6. D√©sassocier les formations (si la fonction existe)
      if (associations.formations > 0 && typeof this.disassociateCCTFormations === 'function') {
        console.log(`üîÑ D√©sassociation de ${associations.formations} formation(s)...`);
        try {
          await this.disassociateCCTFormations(cctId);
        } catch (error) {
          console.warn(`‚ö†Ô∏è Erreur lors de la d√©sassociation des formations: ${error.message}`);
          // Continuer malgr√© l'erreur
        }
      }
      
      // 7. D√©sassocier les d√©cisions (si la fonction existe)
      if (associations.decisions > 0 && typeof this.disassociateCCTDecisions === 'function') {
        console.log(`üîÑ D√©sassociation de ${associations.decisions} d√©cision(s)...`);
        try {
          await this.disassociateCCTDecisions(cctId);
        } catch (error) {
          console.warn(`‚ö†Ô∏è Erreur lors de la d√©sassociation des d√©cisions: ${error.message}`);
          // Continuer malgr√© l'erreur
        }
      }
      
      console.log('‚úÖ Toutes les associations ont √©t√© supprim√©es');
      
      // 8. Maintenant supprimer le CCT
      console.log('üóëÔ∏è Suppression du CCT...');
      const response = await api.delete(`/CCTs/${cctId}`);
      
      console.log('‚úÖ CCT supprim√© avec succ√®s apr√®s d√©sassociation');
      return response.data;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression avec d√©sassociation:', error);
      throw new Error(`Erreur lors de la suppression avec d√©sassociation : ${error.message}`);
    }
  },

  // Suppression FORC√âE du CCT (ignore toutes les contraintes)
  async forceDeleteCCT(cctId) {
    try {
      console.log(`üö® SUPPRESSION FORC√âE CCT ${cctId} - ATTENTION DANGER ! üö®`);
      
      // 1. V√©rifier les associations (pour information seulement)
      const associations = await this.checkCCTAssociations(cctId);
      const totalAssociations = Object.values(associations || {}).reduce((sum, count) => sum + count, 0);
      
      if (totalAssociations > 0) {
        console.log(`‚ö†Ô∏è ATTENTION : ${totalAssociations} associations trouv√©es qui seront ORPHELINES !`);
        console.log('üìä Associations qui deviendront orphelines:', associations);
      }
      
      // 2. Suppression directe du CCT (ignore les contraintes)
      console.log('üóëÔ∏è SUPPRESSION FORC√âE EN COURS...');
      const response = await api.delete(`/CCTs/${cctId}`);
      
      console.log('‚úÖ CCT supprim√© de force avec succ√®s !');
      console.log('‚ö†Ô∏è ATTENTION : Les entit√©s associ√©es sont maintenant orphelines !');
      
      return {
        success: true,
        message: `CCT supprim√© de force ! ${totalAssociations} entit√©(s) orpheline(s)`,
        orphanedEntities: associations,
        totalOrphaned: totalAssociations
      };
      
    } catch (error) {
      console.error('‚ùå ERREUR lors de la suppression forc√©e:', error);
      
      if (error.response?.status === 500) {
        // Erreur backend - contraintes trop fortes
        throw new Error(`Suppression forc√©e impossible : Le backend bloque la suppression √† cause de contraintes trop strictes.
        
üîç **Cause :** Contraintes de cl√©s √©trang√®res non nullable dans la base de donn√©es.

üí° **Solutions possibles :**
1. Modifier la base de donn√©es pour permettre les valeurs NULL
2. Utiliser la suppression avec d√©sassociation
3. Contacter l'administrateur de la base de donn√©es`);
      } else {
        throw new Error(`Erreur lors de la suppression forc√©e : ${error.message}`);
      }
    }
  },

  // R√©cup√©rer les agents d'un CCT
  async getCCTAgents(id) {
    try {
      const response = await api.get(`/CCTs/${id}/agents`);
      return response;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des agents:', error);
      throw error;
    }
  },

  // R√©cup√©rer les chefs de centre d'un CCT
  async getCCTChefsCentres(id) {
    try {
      const response = await api.get(`/CCTs/${id}/chefs-centres`);
      return response;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des chefs de centre:', error);
      throw error;
    }
  },

  // R√©cup√©rer les lignes d'un CCT
  async getCCTLignes(id) {
    try {
      const response = await api.get(`/CCTs/${id}/lignes`);
      return response;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des lignes:', error);
      throw error;
    }
  },

  // R√©cup√©rer les √©quipements d'un CCT
  async getCCTEquipements(id) {
    try {
      const response = await api.get(`/CCTs/${id}/equipements`);
      return response;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des √©quipements:', error);
      throw error;
    }
  },

  // V√©rifier les associations d'un CCT avant suppression
  async checkCCTAssociations(cctId) {
    try {
      console.log(`=== V√âRIFICATION DES ASSOCIATIONS CCT ${cctId} ===`);
      
      // V√©rifier seulement les associations disponibles
      const [agents, chefsCentres, lignes, equipements] = await Promise.all([
        this.getCCTAgents(cctId).catch(() => ({ data: [] })),
        this.getCCTChefsCentres(cctId).catch(() => ({ data: [] })),
        this.getCCTLignes(cctId).catch(() => ({ data: [] })),
        this.getCCTEquipements(cctId).catch(() => ({ data: [] }))
      ]);
      
      const associations = {
        agents: agents.data?.length || 0,
        chefsCentres: chefsCentres.data?.length || 0,
        lignes: lignes.data?.length || 0,
        equipements: equipements.data?.length || 0
      };
      
      const totalAssociations = Object.values(associations).reduce((sum, count) => sum + count, 0);
      
      console.log('üìä Associations trouv√©es:', associations);
      console.log(`üìà Total des associations: ${totalAssociations}`);
      
      if (totalAssociations > 0) {
        console.log('‚ö†Ô∏è CCT a des associations - suppression bloqu√©e');
        return associations;
      } else {
        console.log('‚úÖ Aucune association trouv√©e - suppression autoris√©e');
        return null;
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification des associations:', error);
      // En cas d'erreur, bloquer la suppression par s√©curit√©
      return { error: true, message: 'Erreur lors de la v√©rification des associations' };
    }
  },

  // Fonctions de d√©sassociation des entit√©s du CCT
  
  // D√©sassocier les agents du CCT (mettre CCTId = null)
  async disassociateCCTAgents(cctId) {
    try {
      console.log(`üîÑ D√©sassociation des agents du CCT ${cctId}...`);
      
      // R√©cup√©rer tous les agents du CCT
      const agentsResponse = await this.getCCTAgents(cctId);
      const agents = agentsResponse.data || [];
      
      if (agents.length === 0) {
        console.log('‚ÑπÔ∏è Aucun agent √† d√©sassocier');
        return;
      }
      
      // D√©sassocier chaque agent (mettre CCTId = null)
      const disassociationPromises = agents.map(agent => 
        api.put(`/Agents/${agent.id}`, { ...agent, cctId: null })
      );
      
      await Promise.all(disassociationPromises);
      console.log(`‚úÖ ${agents.length} agent(s) d√©sassoci√©(s) du CCT ${cctId}`);
      
    } catch (error) {
      console.error(`‚ùå Erreur lors de la d√©sassociation des agents:`, error);
      throw new Error(`Impossible de d√©sassocier les agents : ${error.message}`);
    }
  },
  
  // D√©sassocier les chefs de centre d'un CCT
  async disassociateCCTChefsCentres(cctId) {
    try {
      console.log(`üîÑ D√©sassociation des chefs de centre du CCT ${cctId}...`);
      
      // R√©cup√©rer les chefs de centre du CCT
      const response = await this.getCCTChefsCentres(cctId);
      const chefsCentres = response.data || [];
      
      if (chefsCentres.length === 0) {
        console.log('‚ÑπÔ∏è Aucun chef de centre √† d√©sassocier');
        return { success: true, count: 0 };
      }
      
      console.log(`üìã ${chefsCentres.length} chef(s) de centre trouv√©(s)`);
      
      // D√©sassocier tous les chefs de centre en parall√®le
      const disassociationPromises = chefsCentres.map(chef => {
        const updatedChef = { ...chef, cctId: null };
        return api.put(`/ChefCentres/${chef.id}`, updatedChef)
          .then(() => {
            console.log(`‚úÖ Chef de centre ${chef.id} d√©sassoci√©`);
            return { success: true, id: chef.id };
          })
          .catch(error => {
            console.error(`‚ùå Erreur lors de la d√©sassociation du chef ${chef.id}:`, error);
            return { success: false, id: chef.id, error: error.message };
          });
      });
      
      const results = await Promise.all(disassociationPromises);
      const successCount = results.filter(r => r.success).length;
      const errorCount = results.filter(r => !r.success).length;
      
      console.log(`üìä R√©sultat d√©sassociation chefs de centre: ${successCount} succ√®s, ${errorCount} √©checs`);
      
      if (errorCount > 0) {
        console.warn(`‚ö†Ô∏è ${errorCount} chef(s) de centre n'ont pas pu √™tre d√©sassoci√©s`);
        const failedChefs = results.filter(r => !r.success);
        console.warn('‚ùå √âchecs:', failedChefs);
      }
      
      return { 
        success: successCount > 0, 
        count: successCount,
        errors: errorCount,
        message: `${successCount} d√©sassoci√©(s), ${errorCount} √©chec(s)`,
        results: results
      };
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la d√©sassociation des chefs de centre:', error);
      throw new Error(`Impossible de d√©sassocier les chefs de centre : ${error.message}`);
    }
  },
  
  // D√©sassocier les lignes du CCT
  async disassociateCCTLignes(cctId) {
    try {
      console.log(`üîÑ D√©sassociation des lignes du CCT ${cctId}...`);
      
      const lignesResponse = await this.getCCTLignes(cctId);
      const lignes = lignesResponse.data || [];
      
      if (lignes.length === 0) {
        console.log('‚ÑπÔ∏è Aucune ligne √† d√©sassocier');
        return;
      }
      
      const disassociationPromises = lignes.map(ligne => 
        api.put(`/Lignes/${ligne.id}`, { ...ligne, cctId: null })
      );
      
      await Promise.all(disassociationPromises);
      console.log(`‚úÖ ${lignes.length} ligne(s) d√©sassoci√©e(s) du CCT ${cctId}`);
      
    } catch (error) {
      console.error(`‚ùå Erreur lors de la d√©sassociation des lignes:`, error);
      throw new Error(`Impossible de d√©sassocier les lignes : ${error.message}`);
    }
  },
  
  // D√©sassocier les √©quipements du CCT
  async disassociateCCTEquipements(cctId) {
    try {
      console.log(`üîÑ D√©sassociation des √©quipements du CCT ${cctId}...`);
      
      const equipementsResponse = await this.getCCTEquipements(cctId);
      const equipements = equipementsResponse.data || [];
      
      if (equipements.length === 0) {
        console.log('‚ÑπÔ∏è Aucun √©quipement √† d√©sassocier');
        return;
      }
      
      const disassociationPromises = equipements.map(equipement => 
        api.put(`/Equipements/${equipement.id}`, { ...equipement, cctId: null })
      );
      
      await Promise.all(disassociationPromises);
      console.log(`‚úÖ ${equipements.length} √©quipement(s) d√©sassoci√©(s) du CCT ${cctId}`);
      
    } catch (error) {
      console.error(`‚ùå Erreur lors de la d√©sassociation des √©quipements:`, error);
      throw new Error(`Impossible de d√©sassocier les √©quipements : ${error.message}`);
    }
  },
  
  // D√©sassocier les formations du CCT
  async disassociateCCTFormations(cctId) {
    try {
      console.log(`üîÑ D√©sassociation des formations du CCT ${cctId}...`);
      
      const formationsResponse = await this.getCCTFormations(cctId);
      const formations = formationsResponse.data || [];
      
      if (formations.length === 0) {
        console.log('‚ÑπÔ∏è Aucune formation √† d√©sassocier');
        return;
      }
      
      const disassociationPromises = formations.map(formation => 
        api.put(`/Formations/${formation.id}`, { ...formation, cctId: null })
      );
      
      await Promise.all(disassociationPromises);
      console.log(`‚úÖ ${formations.length} formation(s) d√©sassoci√©e(s) du CCT ${cctId}`);
      
    } catch (error) {
      console.error(`‚ùå Erreur lors de la d√©sassociation des formations:`, error);
      throw new Error(`Impossible de d√©sassocier les formations : ${error.message}`);
    }
  },
  
  // D√©sassocier les d√©cisions du CCT
  async disassociateCCTDecisions(cctId) {
    try {
      console.log(`üîÑ D√©sassociation des d√©cisions du CCT ${cctId}...`);
      
      const decisionsResponse = await this.getCCTDecisions(cctId);
      const decisions = decisionsResponse.data || [];
      
      if (decisions.length === 0) {
        console.log('‚ÑπÔ∏è Aucune d√©cision √† d√©sassocier');
        return;
      }
      
      const disassociationPromises = decisions.map(decision => 
        api.put(`/Decisions/${decision.id}`, { ...decision, cctId: null })
      );
      
      await Promise.all(disassociationPromises);
      console.log(`‚úÖ ${decisions.length} d√©cision(s) d√©sassoci√©e(s) du CCT ${cctId}`);
      
    } catch (error) {
      console.error(`‚ùå Erreur lors de la d√©sassociation des d√©cisions:`, error);
      throw new Error(`Impossible de d√©sassocier les d√©cisions : ${error.message}`);
    }
  }
};

export default cctService; 