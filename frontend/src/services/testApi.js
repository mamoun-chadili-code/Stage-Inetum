// Fichier de test pour v√©rifier la connectivit√© de l'API
import api from './api';
import { lignesService } from './lignesService';
import cctService from './cctService';

export const testApiConnectivity = async () => {
  console.log('üß™ Test de connectivit√© API...');
  
  try {
    // Test 1: V√©rifier la connectivit√© de base
    console.log('1Ô∏è‚É£ Test de connectivit√© de base...');
    const response = await api.get('/');
    console.log('‚úÖ Connectivit√© de base OK:', response.status);
    
    // Test 2: Tester la r√©cup√©ration des lignes
    console.log('2Ô∏è‚É£ Test de r√©cup√©ration des lignes...');
    const lignes = await lignesService.getAllLignes();
    console.log('‚úÖ Lignes r√©cup√©r√©es:', lignes?.length || 0, 'lignes');
    
    // Test 3: Tester la r√©cup√©ration des CCTs
    console.log('3Ô∏è‚É£ Test de r√©cup√©ration des CCTs...');
    const ccts = await cctService.getAllCCTs();
    console.log('‚úÖ CCTs r√©cup√©r√©s:', ccts?.length || 0, 'CCTs');
    
    console.log('üéâ Tous les tests API sont pass√©s avec succ√®s !');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test API:', error);
    
    if (error.code === 'ECONNREFUSED') {
      console.error('üîå Erreur de connexion: Le serveur backend n\'est pas accessible');
      console.error('üí° V√©rifiez que votre backend est d√©marr√© sur http://localhost:7000');
    } else if (error.response?.status === 404) {
      console.error('üîç Erreur 404: L\'endpoint n\'existe pas');
      console.error('üí° V√©rifiez que votre API backend a bien les routes /Lignes configur√©es');
    } else if (error.response?.status === 500) {
      console.error('üí• Erreur 500: Erreur interne du serveur');
      console.error('üí° V√©rifiez les logs de votre backend');
    }
    
    return false;
  }
};

// Fonction pour tester une ligne sp√©cifique
export const testLigneOperations = async () => {
  console.log('üß™ Test des op√©rations CRUD sur les lignes...');
  
  try {
    // Test de cr√©ation
    console.log('1Ô∏è‚É£ Test de cr√©ation d\'une ligne...');
    const nouvelleLigne = await lignesService.createLigne({
      numeroLigne: 999,
      cctId: 1,
      categorieId: 1,
      statutId: 1,
      dateStatut: '2024-12-01'
    });
    console.log('‚úÖ Ligne cr√©√©e:', nouvelleLigne);
    
    // Test de r√©cup√©ration par ID
    console.log('2Ô∏è‚É£ Test de r√©cup√©ration par ID...');
    const ligneRecuperee = await lignesService.getLigneById(nouvelleLigne.id);
    console.log('‚úÖ Ligne r√©cup√©r√©e:', ligneRecuperee);
    
    // Test de mise √† jour
    console.log('3Ô∏è‚É£ Test de mise √† jour...');
    const ligneModifiee = await lignesService.updateLigne(nouvelleLigne.id, {
      numeroLigne: 999,
      cctId: 1,
      categorieId: 2,
      statutId: 2,
      dateStatut: '2024-12-02'
    });
    console.log('‚úÖ Ligne modifi√©e:', ligneModifiee);
    
    // Test de suppression
    console.log('4Ô∏è‚É£ Test de suppression...');
    await lignesService.deleteLigne(nouvelleLigne.id);
    console.log('‚úÖ Ligne supprim√©e avec succ√®s');
    
    console.log('üéâ Tous les tests CRUD sont pass√©s avec succ√®s !');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test CRUD:', error);
    return false;
  }
};

// Fonction pour afficher les informations de configuration
export const showApiConfig = () => {
  console.log('‚öôÔ∏è Configuration API actuelle:');
  console.log('Base URL:', api.defaults.baseURL);
  console.log('Timeout:', api.defaults.timeout, 'ms');
  console.log('Headers:', api.defaults.headers);
};

// Export des fonctions de test
export default {
  testApiConnectivity,
  testLigneOperations,
  showApiConfig
};
