# Test imm√©diat de l'API des √©quipements
Write-Host "=== TEST IMM√âDIAT API √âQUIPEMENTS ===" -ForegroundColor Green
Write-Host "Date: $(Get-Date)" -ForegroundColor Yellow

# Attendre que l'API d√©marre
Write-Host "`n‚è≥ Attente du d√©marrage de l'API..." -ForegroundColor Yellow
Start-Sleep -Seconds 10

try {
    # Test de sant√©
    Write-Host "`nüè• Test de sant√© de l'API..." -ForegroundColor Cyan
    $health = Invoke-RestMethod -Uri "https://localhost:7001/api/Health" -Method Get
    Write-Host "‚úÖ API OK: $($health.status)" -ForegroundColor Green
    
    # Test des √©quipements (√©chapper l'URL)
    Write-Host "`nüîß Test des √©quipements..." -ForegroundColor Cyan
    $uri = "https://localhost:7001/api/Equipements?Page=1" + "&" + "PageSize=3"
    $equipements = Invoke-RestMethod -Uri $uri -Method Get
    Write-Host "‚úÖ √âquipements r√©cup√©r√©s: $($equipements.Count)" -ForegroundColor Green
    
    if ($equipements.Count -gt 0) {
        $premier = $equipements[0]
        Write-Host "`nüìä STRUCTURE DU PREMIER √âQUIPEMENT:" -ForegroundColor Yellow
        Write-Host "ID: $($premier.id)" -ForegroundColor White
        Write-Host "Marque: $($premier.marque)" -ForegroundColor White
        Write-Host "Mod√®le: $($premier.modele)" -ForegroundColor White
        Write-Host "Type Libell√©: $($premier.typeEquipementLibelle)" -ForegroundColor Green
        Write-Host "Ligne Nom: $($premier.ligneNom)" -ForegroundColor Green
        Write-Host "Statut Libell√©: $($premier.statutLibelle)" -ForegroundColor Green
        
        # V√©rifier que les anciennes propri√©t√©s probl√©matiques n'existent plus
        Write-Host "`nüîç V√âRIFICATION DES PROPRI√âT√âS PROBL√âMATIQUES:" -ForegroundColor Yellow
        $hasTypeEquipement = $premier.PSObject.Properties.Name -contains "typeEquipement"
        $hasStatutEquipement = $premier.PSObject.Properties.Name -contains "statutEquipement"
        
        if (!$hasTypeEquipement) {
            Write-Host "‚úÖ typeEquipement n'existe plus (PARFAIT!)" -ForegroundColor Green
        } else {
            Write-Host "‚ùå typeEquipement existe encore!" -ForegroundColor Red
        }
        
        if (!$hasStatutEquipement) {
            Write-Host "‚úÖ statutEquipement n'existe plus (PARFAIT!)" -ForegroundColor Green
        } else {
            Write-Host "‚ùå statutEquipement existe encore!" -ForegroundColor Red
        }
        
        Write-Host "`nüéØ STRUCTURE COMPL√àTE JSON:" -ForegroundColor Cyan
        $premier | ConvertTo-Json -Depth 2
    }
    
} catch {
    Write-Host "‚ùå ERREUR: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n" + "="*60 -ForegroundColor Green
Write-Host "üéØ CONCLUSION" -ForegroundColor Green
Write-Host "="*60 -ForegroundColor Green
Write-Host "Si vous voyez les propri√©t√©s comme 'typeEquipementLibelle'," -ForegroundColor Yellow
Write-Host "l'API est CORRECTEMENT corrig√©e !" -ForegroundColor Green
Write-Host "`nMaintenant il faut adapter le frontend pour utiliser" -ForegroundColor Yellow
Write-Host "ces nouvelles propri√©t√©s au lieu des anciennes." -ForegroundColor Yellow
