# Diagnostic imm√©diat du probl√®me frontend
Write-Host "=== DIAGNOSTIC IMM√âDIAT - PROBL√àME FRONTEND ===" -ForegroundColor Red
Write-Host "Date: $(Get-Date)" -ForegroundColor Yellow

# Attendre que l'API d√©marre
Write-Host "`n‚è≥ Attente du d√©marrage de l'API..." -ForegroundColor Yellow
Start-Sleep -Seconds 15

# Test de base - Sant√© de l'API
Write-Host "`nüè• Test 1: Sant√© de l'API..." -ForegroundColor Cyan
try {
    $health = Invoke-RestMethod -Uri "https://localhost:7001/api/Health" -Method Get -ErrorAction Stop
    Write-Host "‚úÖ API accessible: $($health.status)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå API inaccessible: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "üí° V√©rifiez que l'API est d√©marr√©e sur le port 7001" -ForegroundColor Yellow
    exit 1
}

# Test critique - Structure de la r√©ponse des √©quipements
Write-Host "`nüîß Test 2: Structure des √©quipements (CRITIQUE)..." -ForegroundColor Cyan
try {
    $equipements = Invoke-RestMethod -Uri "https://localhost:7001/api/Equipements?Page=1&PageSize=2" -Method Get -ErrorAction Stop
    Write-Host "‚úÖ Endpoint accessible: $($equipements.Count) √©quipements r√©cup√©r√©s" -ForegroundColor Green
    
    if ($equipements.Count -gt 0) {
        $firstEquipement = $equipements[0]
        
        Write-Host "`nüìä STRUCTURE COMPL√àTE du premier √©quipement:" -ForegroundColor Yellow
        $firstEquipement | ConvertTo-Json -Depth 3 | Write-Host -ForegroundColor Gray
        
        Write-Host "`nüîç ANALYSE DES PROPRI√âT√âS PROBL√âMATIQUES:" -ForegroundColor Red
        
        # V√©rifier les anciennes propri√©t√©s probl√©matiques
        if ($firstEquipement.PSObject.Properties.Name -contains "typeEquipement") {
            Write-Host "‚ùå PROBL√àME: 'typeEquipement' existe encore!" -ForegroundColor Red
            if ($firstEquipement.typeEquipement -ne $null) {
                Write-Host "   Structure: $($firstEquipement.typeEquipement | ConvertTo-Json)" -ForegroundColor Gray
            } else {
                Write-Host "   Valeur: NULL (source de l'erreur!)" -ForegroundColor Red
            }
        } else {
            Write-Host "‚úÖ 'typeEquipement' n'existe plus (bon)" -ForegroundColor Green
        }
        
        if ($firstEquipement.PSObject.Properties.Name -contains "statutEquipement") {
            Write-Host "‚ùå PROBL√àME: 'statutEquipement' existe encore!" -ForegroundColor Red
            if ($firstEquipement.statutEquipement -ne $null) {
                Write-Host "   Structure: $($firstEquipement.statutEquipement | ConvertTo-Json)" -ForegroundColor Gray
            } else {
                Write-Host "   Valeur: NULL (source de l'erreur!)" -ForegroundColor Red
            }
        } else {
            Write-Host "‚úÖ 'statutEquipement' n'existe plus (bon)" -ForegroundColor Green
        }
        
        # V√©rifier les nouvelles propri√©t√©s DTO
        Write-Host "`n‚úÖ NOUVELLES PROPRI√âT√âS DTO:" -ForegroundColor Green
        Write-Host "   typeEquipementLibelle: '$($firstEquipement.typeEquipementLibelle)'" -ForegroundColor White
        Write-Host "   ligneNom: '$($firstEquipement.ligneNom)'" -ForegroundColor White
        Write-Host "   statutLibelle: '$($firstEquipement.statutLibelle)'" -ForegroundColor White
        
    } else {
        Write-Host "‚ùå Aucun √©quipement trouv√©!" -ForegroundColor Red
    }
    
} catch {
    Write-Host "‚ùå Erreur √©quipements: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n" + "="*80 -ForegroundColor Red
Write-Host "üö® CONCLUSION DU DIAGNOSTIC" -ForegroundColor Red
Write-Host "="*80 -ForegroundColor Red

Write-Host "`nüí° SI L'ERREUR PERSISTE, CELA SIGNIFIE QUE:" -ForegroundColor Yellow
Write-Host "   1. Le frontend utilise encore l'ancienne API" -ForegroundColor White
Write-Host "   2. Le cache du navigateur contient encore les anciennes donn√©es" -ForegroundColor White
Write-Host "   3. L'API retourne encore les anciens objets avec typeEquipement null" -ForegroundColor White

Write-Host "`nüîß SOLUTIONS IMM√âDIATES:" -ForegroundColor Yellow
Write-Host "   1. Red√©marrer compl√®tement l'API" -ForegroundColor White
Write-Host "   2. Vider le cache du navigateur (Ctrl+Shift+R)" -ForegroundColor White
Write-Host "   3. V√©rifier l'URL de l'API dans le frontend" -ForegroundColor White
Write-Host "   4. Adapter le code frontend pour les nouvelles propri√©t√©s" -ForegroundColor White

Write-Host "`nüåê TEST MANUEL:" -ForegroundColor Cyan
Write-Host "   Ouvrez: https://localhost:7001/api/Equipements?Page=1&PageSize=1" -ForegroundColor Gray
Write-Host "   V√©rifiez la structure JSON dans le navigateur" -ForegroundColor Gray

Write-Host "`n" + "="*80 -ForegroundColor Red
