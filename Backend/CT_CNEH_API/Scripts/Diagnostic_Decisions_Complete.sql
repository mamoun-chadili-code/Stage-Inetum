-- Script de diagnostic complet pour le module D√©cisions
-- Ex√©cuter ce script dans SSMS pour v√©rifier l'√©tat des tables

USE [CT_CNEH_DB]
GO

PRINT 'üîç DIAGNOSTIC COMPLET DU MODULE D√âCISIONS'
PRINT '============================================='
PRINT ''

-- 1. V√©rifier l'existence des tables principales
PRINT 'üìã 1. V√âRIFICATION DES TABLES PRINCIPALES'
PRINT '----------------------------------------'

DECLARE @TableExists TABLE (
    TableName NVARCHAR(128),
    Exists BIT,
    RowCount INT
)

INSERT INTO @TableExists (TableName, Exists, RowCount)
SELECT 
    'TypeDecisions',
    CASE WHEN EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TypeDecisions]') AND type in (N'U')) THEN 1 ELSE 0 END,
    CASE WHEN EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TypeDecisions]') AND type in (N'U')) THEN (SELECT COUNT(*) FROM [TypeDecisions]) ELSE 0 END

INSERT INTO @TableExists (TableName, Exists, RowCount)
SELECT 
    'TypeEntites',
    CASE WHEN EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TypeEntites]') AND type in (N'U')) THEN 1 ELSE 0 END,
    CASE WHEN EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TypeEntites]') AND type in (N'U')) THEN (SELECT COUNT(*) FROM [TypeEntites]) ELSE 0 END

INSERT INTO @TableExists (TableName, Exists, RowCount)
SELECT 
    'Decisions',
    CASE WHEN EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Decisions]') AND type in (N'U')) THEN 1 ELSE 0 END,
    CASE WHEN EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Decisions]') AND type in (N'U')) THEN (SELECT COUNT(*) FROM [Decisions]) ELSE 0 END

-- Afficher les r√©sultats
SELECT 
    TableName AS 'Table',
    CASE WHEN Exists = 1 THEN '‚úÖ EXISTE' ELSE '‚ùå MANQUANTE' END AS 'Statut',
    CASE WHEN Exists = 1 THEN CAST(RowCount AS VARCHAR) ELSE 'N/A' END AS 'Nombre d''enregistrements'
FROM @TableExists
ORDER BY TableName

PRINT ''

-- 2. V√©rifier la structure de la table Decisions
PRINT 'üìã 2. STRUCTURE DE LA TABLE DECISIONS'
PRINT '-------------------------------------'

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Decisions]') AND type in (N'U'))
BEGIN
    SELECT 
        COLUMN_NAME AS 'Colonne',
        DATA_TYPE AS 'Type',
        IS_NULLABLE AS 'Nullable',
        COLUMN_DEFAULT AS 'Valeur par d√©faut'
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_NAME = 'Decisions'
    ORDER BY ORDINAL_POSITION
END
ELSE
BEGIN
    PRINT '‚ùå La table Decisions n''existe pas !'
END

PRINT ''

-- 3. V√©rifier le contenu des tables de r√©f√©rence
PRINT 'üìã 3. CONTENU DES TABLES DE R√âF√âRENCE'
PRINT '-------------------------------------'

-- TypeDecisions
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TypeDecisions]') AND type in (N'U'))
BEGIN
    PRINT 'üìä Table TypeDecisions :'
    SELECT 
        [Id],
        [Code],
        [Libelle]
    FROM [TypeDecisions] 
    ORDER BY [Id]
    PRINT ''
END
ELSE
BEGIN
    PRINT '‚ùå Table TypeDecisions manquante !'
END

-- TypeEntites
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TypeEntites]') AND type in (N'U'))
BEGIN
    PRINT 'üìä Table TypeEntites :'
    SELECT 
        [Id],
        [Code],
        [Libelle]
    FROM [TypeEntites] 
    ORDER BY [Id]
    PRINT ''
END
ELSE
BEGIN
    PRINT '‚ùå Table TypeEntites manquante !'
END

-- 4. V√©rifier les contraintes de cl√©s √©trang√®res
PRINT 'üìã 4. CONTRAINTES DE CL√âS √âTRANG√àRES'
PRINT '------------------------------------'

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Decisions]') AND type in (N'U'))
BEGIN
    SELECT 
        fk.name AS 'Nom de la contrainte',
        OBJECT_NAME(fk.parent_object_id) AS 'Table',
        COL_NAME(fkc.parent_object_id, fkc.parent_column_id) AS 'Colonne',
        OBJECT_NAME(fk.referenced_object_id) AS 'Table r√©f√©renc√©e',
        COL_NAME(fkc.referenced_object_id, fkc.referenced_column_id) AS 'Colonne r√©f√©renc√©e'
    FROM sys.foreign_keys fk
    INNER JOIN sys.foreign_key_columns fkc ON fk.object_id = fkc.constraint_object_id
    WHERE OBJECT_NAME(fk.parent_object_id) = 'Decisions'
    ORDER BY fk.name
END
ELSE
BEGIN
    PRINT '‚ùå Impossible de v√©rifier les contraintes : table Decisions manquante'
END

PRINT ''

-- 5. Recommandations
PRINT 'üìã 5. RECOMMANDATIONS'
PRINT '---------------------'

DECLARE @TypeDecisionsExists BIT = (SELECT Exists FROM @TableExists WHERE TableName = 'TypeDecisions')
DECLARE @TypeEntitesExists BIT = (SELECT Exists FROM @TableExists WHERE TableName = 'TypeEntites')
DECLARE @DecisionsExists BIT = (SELECT Exists FROM @TableExists WHERE TableName = 'Decisions')

IF @TypeDecisionsExists = 0
BEGIN
    PRINT '‚ùå ACTION REQUISE: Cr√©er et peupler la table TypeDecisions'
    PRINT '   - Ex√©cuter le script Populate_TypeDecisions.sql'
END

IF @TypeEntitesExists = 0
BEGIN
    PRINT '‚ùå ACTION REQUISE: Cr√©er et peupler la table TypeEntites'
    PRINT '   - Ex√©cuter le script Populate_TypeEntites.sql'
END

IF @DecisionsExists = 0
BEGIN
    PRINT '‚ùå ACTION REQUISE: Cr√©er la table Decisions'
    PRINT '   - V√©rifier que les migrations Entity Framework sont appliqu√©es'
END

IF @TypeDecisionsExists = 1 AND @TypeEntitesExists = 1 AND @DecisionsExists = 1
BEGIN
    PRINT '‚úÖ Toutes les tables n√©cessaires existent'
    PRINT '‚úÖ Le module D√©cisions devrait fonctionner correctement'
END

PRINT ''
PRINT 'üéØ DIAGNOSTIC TERMIN√â !'
GO
