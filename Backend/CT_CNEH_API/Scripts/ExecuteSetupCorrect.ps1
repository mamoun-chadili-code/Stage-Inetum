# Script PowerShell pour ex√©cuter la configuration CORRIG√âE de la base de donn√©es
# Ce script utilise les vrais noms de colonnes de votre base existante

Write-Host "=== CONFIGURATION CORRIG√âE DE LA BASE DE DONN√âES CT_CNEH ===" -ForegroundColor Green
Write-Host ""

# V√©rifier si le fichier SQL existe
$sqlFile = "SetupCompleteDatabase_Correct.sql"
if (-not (Test-Path $sqlFile)) {
    Write-Host "ERREUR: Le fichier $sqlFile n'existe pas dans le r√©pertoire courant." -ForegroundColor Red
    Write-Host "Assurez-vous d'√™tre dans le bon r√©pertoire (Scripts)." -ForegroundColor Yellow
    exit 1
}

Write-Host "Fichier SQL trouv√©: $sqlFile" -ForegroundColor Green
Write-Host ""

# Afficher ce que va faire le script
Write-Host "Ce script va utiliser les VRAIS noms de colonnes :" -ForegroundColor Cyan
Write-Host "  üìã Libelle (au lieu de Nom)" -ForegroundColor White
Write-Host "  üìã HistoriqueAffectations (au lieu de HistoriqueAffectation)" -ForegroundColor White
Write-Host "  üìã StatutAdministratifs (au lieu de StatutsAdministratifs)" -ForegroundColor White
Write-Host ""

Write-Host "Le script va ajouter :" -ForegroundColor Cyan
Write-Host "  üìã 12 r√©gions du Maroc" -ForegroundColor White
Write-Host "  üìã 26 provinces" -ForegroundColor White
Write-Host "  üìã 18 villes" -ForegroundColor White
Write-Host "  üìã 10 CCTs (centres de collecte)" -ForegroundColor White
Write-Host "  üìã 8 cat√©gories CCT" -ForegroundColor White
Write-Host "  üìã 11 statuts administratifs" -ForegroundColor White
Write-Host "  üìã 10 agents de test" -ForegroundColor White
Write-Host "  üìã 13 enregistrements d'historique" -ForegroundColor White
Write-Host ""

# Demander confirmation √† l'utilisateur
Write-Host "‚ö†Ô∏è ATTENTION: Ce script va modifier la base de donn√©es CT_CNEH_DB" -ForegroundColor Yellow
Write-Host "Assurez-vous que:" -ForegroundColor Yellow
Write-Host "  - La base de donn√©es CT_CNEH_DB est accessible" -ForegroundColor Yellow
Write-Host "  - Vous avez les droits d'√©criture sur la base de donn√©es" -ForegroundColor Yellow
Write-Host "  - Le backend API est arr√™t√© (pour √©viter les conflits)" -ForegroundColor Yellow
Write-Host ""

$confirmation = Read-Host "Voulez-vous continuer avec la configuration corrig√©e ? (O/N)"
if ($confirmation -ne "O" -and $confirmation -ne "o") {
    Write-Host "Op√©ration annul√©e par l'utilisateur." -ForegroundColor Yellow
    exit 0
}

Write-Host ""
Write-Host "üöÄ D√©marrage de la configuration corrig√©e..." -ForegroundColor Green

try {
    # Ex√©cuter le script SQL
    Write-Host "Connexion √† la base de donn√©es..." -ForegroundColor Cyan
    
    # Utiliser sqlcmd si disponible
    if (Get-Command sqlcmd -ErrorAction SilentlyContinue) {
        Write-Host "Utilisation de sqlcmd..." -ForegroundColor Cyan
        
        # Ex√©cuter le script avec affichage des messages
        $result = sqlcmd -S "localhost" -d "CT_CNEH_DB" -i $sqlFile -E -m 1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host ""
            Write-Host "‚úÖ Configuration termin√©e avec succ√®s !" -ForegroundColor Green
            Write-Host ""
            Write-Host "üìã R√©sultats de l'ex√©cution:" -ForegroundColor Cyan
            $result | ForEach-Object { 
                if ($_ -match "‚úÖ|üìã|üìä|üîó|üéâ") {
                    Write-Host $_ -ForegroundColor Green
                } elseif ($_ -match "‚ùå") {
                    Write-Host $_ -ForegroundColor Red
                } else {
                    Write-Host $_ -ForegroundColor White
                }
            }
            
            Write-Host ""
            Write-Host "üéâ Base de donn√©es configur√©e avec succ√®s !" -ForegroundColor Green
            Write-Host ""
            Write-Host "üìä R√©sum√© de la configuration:" -ForegroundColor Cyan
            Write-Host "  - 12 r√©gions ajout√©es" -ForegroundColor White
            Write-Host "  - 26 provinces ajout√©es" -ForegroundColor White
            Write-Host "  - 18 villes ajout√©es" -ForegroundColor White
            Write-Host "  - 10 CCTs ajout√©s" -ForegroundColor White
            Write-Host "  - 8 cat√©gories ajout√©es" -ForegroundColor White
            Write-Host "  - 11 statuts ajout√©s" -ForegroundColor White
            Write-Host "  - 10 agents de test ajout√©s" -ForegroundColor White
            Write-Host "  - 13 enregistrements d'historique ajout√©s" -ForegroundColor White
            
        } else {
            Write-Host "‚ùå Erreur lors de l'ex√©cution du script." -ForegroundColor Red
            Write-Host "Code de sortie: $LASTEXITCODE" -ForegroundColor Red
            Write-Host ""
            Write-Host "üí° V√©rifiez:" -ForegroundColor Yellow
            Write-Host "  - La connexion √† la base de donn√©es" -ForegroundColor White
            Write-Host "  - Les droits d'√©criture" -ForegroundColor White
            Write-Host "  - Les logs d'erreur SQL Server" -ForegroundColor White
            Write-Host "  - La structure des tables existantes" -ForegroundColor White
        }
    } else {
        Write-Host "sqlcmd n'est pas disponible." -ForegroundColor Yellow
        Write-Host ""
        Write-Host "üí° Solutions alternatives:" -ForegroundColor Cyan
        Write-Host "  1. Installez SQL Server Command Line Utilities" -ForegroundColor White
        Write-Host "  2. Ou ouvrez SQL Server Management Studio" -ForegroundColor White
        Write-Host "  3. Et ex√©cutez le fichier: $sqlFile" -ForegroundColor White
        
        # Afficher le chemin complet du fichier
        $fullPath = (Get-Item $sqlFile).FullName
        Write-Host ""
        Write-Host "Chemin complet du fichier: $fullPath" -ForegroundColor Yellow
    }
    
} catch {
    Write-Host "‚ùå Erreur lors de l'ex√©cution: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "‚ùå D√©tails de l'erreur: $($_.Exception.ToString())" -ForegroundColor Red
}

Write-Host ""
Write-Host "=== PROCHAINES √âTAPES ===" -ForegroundColor Green
Write-Host ""

if ($LASTEXITCODE -eq 0) {
    Write-Host "üéØ Maintenant vous pouvez :" -ForegroundColor Cyan
    Write-Host "  1. D√©marrer le backend API (CT_CNEH_API)" -ForegroundColor White
    Write-Host "  2. D√©marrer l'application frontend (npm start)" -ForegroundColor White
    Write-Host "  3. Aller dans le module Agents" -ForegroundColor White
    Write-Host "  4. V√©rifier que les 10 agents s'affichent correctement" -ForegroundColor White
    Write-Host "  5. Cliquer sur un agent pour voir son historique" -ForegroundColor White
    Write-Host "  6. Tester les fonctionnalit√©s d'ajout/modification" -ForegroundColor White
} else {
    Write-Host "üîß En cas de probl√®me :" -ForegroundColor Cyan
    Write-Host "  1. Ouvrez SQL Server Management Studio" -ForegroundColor White
    Write-Host "  2. Connectez-vous √† la base CT_CNEH_DB" -ForegroundColor White
    Write-Host "  3. Ex√©cutez le script manuellement" -ForegroundColor White
    Write-Host "  4. V√©rifiez les messages d'erreur dans SSMS" -ForegroundColor White
}

Write-Host ""
Write-Host "=== FIN DE LA CONFIGURATION CORRIG√âE ===" -ForegroundColor Green
Write-Host ""
Read-Host "Appuyez sur Entr√©e pour fermer..."
