-- Script de v√©rification et remplissage des dropdowns pour le formulaire Agent
-- V√©rifie que toutes les tables de r√©f√©rence contiennent des donn√©es

USE [CT_CNEH_DB]
GO

PRINT ' === V√âRIFICATION DES DROPDOWNS POUR LE FORMULAIRE AGENT ==='
PRINT ''

-- 1. V√©rifier la table StatutAdministratifs
PRINT 'üîç V√âRIFICATION DE LA TABLE StatutAdministratifs:'
IF EXISTS (SELECT * FROM StatutAdministratifs)
BEGIN
    DECLARE @countStatuts INT = (SELECT COUNT(*) FROM StatutAdministratifs)
    PRINT '   ‚úÖ Table StatutAdministratifs: ' + CAST(@countStatuts AS VARCHAR) + ' enregistrement(s)'
    
    IF @countStatuts = 0
    BEGIN
        PRINT '   ‚ö†Ô∏è  Table vide - Ajout de donn√©es d''exemple...'
        
        INSERT INTO StatutAdministratifs (Libelle, Code, DateCreation, DateModification)
        VALUES 
            ('En activit√©', 'ACTIF', GETDATE(), GETDATE()),
            ('Suspendu', 'SUSP', GETDATE(), GETDATE()),
            ('En formation', 'FORM', GETDATE(), GETDATE()),
            ('En cong√©', 'CONG', GETDATE(), GETDATE()),
            ('Retrait√©', 'RETR', GETDATE(), GETDATE()),
            ('D√©missionn√©', 'DEMI', GETDATE(), GETDATE());
        
        PRINT '   ‚úÖ 6 statuts administratifs ajout√©s'
    END
    ELSE
    BEGIN
        PRINT '   üìã Statuts disponibles:'
        SELECT '     - ' + Libelle + ' (' + Code + ')' as Statut
        FROM StatutAdministratifs
        ORDER BY Libelle;
    END
END
ELSE
BEGIN
    PRINT '   ‚ùå ERREUR: Table StatutAdministratifs introuvable'
    PRINT '   V√©rifiez que le mod√®le et la migration sont corrects'
END

PRINT ''

-- 2. V√©rifier la table CategorieCCTs (utilis√©e pour les cat√©gories CAP)
PRINT 'üîç V√âRIFICATION DE LA TABLE CategorieCCTs (cat√©gories CAP):'
IF EXISTS (SELECT * FROM CategorieCCTs)
BEGIN
    DECLARE @countCategories INT = (SELECT COUNT(*) FROM CategorieCCTs)
    PRINT '   ‚úÖ Table CategorieCCTs: ' + CAST(@countCategories AS VARCHAR) + ' enregistrement(s)'
    
    IF @countCategories = 0
    BEGIN
        PRINT '   ‚ö†Ô∏è  Table vide - Ajout de donn√©es d''exemple...'
        
        INSERT INTO CategorieCCTs (Libelle, Code)
        VALUES 
            ('V√©hicules toute cat√©gorie', 'VTC'),
            ('V√©hicules l√©gers', 'VL'),
            ('Poids lourds', 'PL'),
            ('Motocycles', 'MC'),
            ('V√©hicules agricoles', 'VA'),
            ('V√©hicules sp√©ciaux', 'VS');
        
        PRINT '   ‚úÖ 6 cat√©gories CAP ajout√©es'
    END
    ELSE
    BEGIN
        PRINT '   üìã Cat√©gories CAP disponibles:'
        SELECT '     - ' + Libelle + ' (' + ISNULL(Code, 'Sans code') + ')' as Categorie
        FROM CategorieCCTs
        ORDER BY Libelle;
    END
END
ELSE
BEGIN
    PRINT '   ‚ùå ERREUR: Table CategorieCCTs introuvable'
    PRINT '   V√©rifiez que le mod√®le et la migration sont corrects'
END

PRINT ''

-- 3. V√©rifier la table CCTs
PRINT 'üîç V√âRIFICATION DE LA TABLE CCTs:'
IF EXISTS (SELECT * FROM CCTs)
BEGIN
    DECLARE @countCCTs INT = (SELECT COUNT(*) FROM CCTs)
    PRINT '   ‚úÖ Table CCTs: ' + CAST(@countCCTs AS VARCHAR) + ' enregistrement(s)'
    
    IF @countCCTs = 0
    BEGIN
        PRINT '   ‚ö†Ô∏è  Table vide - V√©rifiez que les scripts de remplissage CCTs ont √©t√© ex√©cut√©s'
    END
    ELSE
    BEGIN
        PRINT '   üìã CCTs disponibles (top 5):'
        SELECT TOP 5 '     - ' + Nom + ' (ID: ' + CAST(Id AS VARCHAR) + ')' as CCT
        FROM CCTs
        ORDER BY Nom;
    END
END
ELSE
BEGIN
    PRINT '   ‚ùå ERREUR: Table CCTs introuvable'
    PRINT '   V√©rifiez que le mod√®le et la migration sont corrects'
END

PRINT ''

-- 4. V√©rifier la table Regions
PRINT 'üîç V√âRIFICATION DE LA TABLE Regions:'
IF EXISTS (SELECT * FROM Regions)
BEGIN
    DECLARE @countRegions INT = (SELECT COUNT(*) FROM Regions)
    PRINT '   ‚úÖ Table Regions: ' + CAST(@countRegions AS VARCHAR) + ' enregistrement(s)'
    
    IF @countRegions = 0
    BEGIN
        PRINT '   ‚ö†Ô∏è  Table vide - V√©rifiez que les scripts de remplissage ont √©t√© ex√©cut√©s'
    END
    ELSE
    BEGIN
        PRINT '   üìã R√©gions disponibles (top 5):'
        SELECT TOP 5 '     - ' + libelle + ' (ID: ' + CAST(Id AS VARCHAR) + ')' as Region
        FROM Regions
        ORDER BY libelle;
    END
END
ELSE
BEGIN
    PRINT '   ‚ùå ERREUR: Table Regions introuvable'
    PRINT '   V√©rifiez que le mod√®le et la migration sont corrects'
END

PRINT ''

-- 5. V√©rifier la table Villes
PRINT 'üîç V√âRIFICATION DE LA TABLE Villes:'
IF EXISTS (SELECT * FROM Villes)
BEGIN
    DECLARE @countVilles INT = (SELECT COUNT(*) FROM Villes)
    PRINT '   ‚úÖ Table Villes: ' + CAST(@countVilles AS VARCHAR) + ' enregistrement(s)'
    
    IF @countVilles = 0
    BEGIN
        PRINT '   ‚ö†Ô∏è  Table vide - V√©rifiez que les scripts de remplissage ont √©t√© ex√©cut√©s'
    END
    ELSE
    BEGIN
        PRINT '   üìã Villes disponibles (top 5):'
        SELECT TOP 5 '     - ' + nom + ' (ID: ' + CAST(Id AS VARCHAR) + ')' as Ville
        FROM Villes
        ORDER BY nom;
    END
END
ELSE
BEGIN
    PRINT '   ‚ùå ERREUR: Table Villes introuvable'
    PRINT '   V√©rifiez que le mod√®le et la migration sont corrects'
END

PRINT ''

-- 6. V√©rifier la table Reseaux
PRINT 'üîç V√âRIFICATION DE LA TABLE Reseaux:'
IF EXISTS (SELECT * FROM Reseaux)
BEGIN
    DECLARE @countReseaux INT = (SELECT COUNT(*) FROM Reseaux)
    PRINT '   ‚úÖ Table Reseaux: ' + CAST(@countReseaux AS VARCHAR) + ' enregistrement(s)'
    
    IF @countReseaux = 0
    BEGIN
        PRINT '   ‚ö†Ô∏è  Table vide - V√©rifiez que les scripts de remplissage ont √©t√© ex√©cut√©s'
    END
    ELSE
    BEGIN
        PRINT '   üìã R√©seaux disponibles (top 5):'
        SELECT TOP 5 '     - ' + Nom + ' (ID: ' + CAST(Id AS VARCHAR) + ')' as Reseau
        FROM Reseaux
        ORDER BY Nom;
    END
END
ELSE
BEGIN
    PRINT '   ‚ùå ERREUR: Table Reseaux introuvable'
    PRINT '   V√©rifiez que le mod√®le et la migration sont corrects'
END

PRINT ''
PRINT ' === R√âSUM√â DE LA V√âRIFICATION ==='
PRINT ''

-- R√©sum√© final
SELECT 
    'StatutAdministratifs' as TableName,
    COUNT(*) as TotalRecords,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ OK'
        ELSE '‚ùå VIDE'
    END as Status
FROM StatutAdministratifs
UNION ALL
SELECT 
    'CategorieCCTs (CAP)' as TableName,
    COUNT(*) as TotalRecords,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ OK'
        ELSE '‚ùå VIDE'
    END as Status
FROM CategorieCCTs
UNION ALL
SELECT 
    'CCTs' as TableName,
    COUNT(*) as TotalRecords,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ OK'
        ELSE '‚ùå VIDE'
    END as Status
FROM CCTs
UNION ALL
SELECT 
    'Regions' as TableName,
    COUNT(*) as TotalRecords,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ OK'
        ELSE '‚ùå VIDE'
    END as Status
FROM Regions
UNION ALL
SELECT 
    'Villes' as TableName,
    COUNT(*) as TotalRecords,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ OK'
        ELSE '‚ùå VIDE'
    END as Status
FROM Villes
UNION ALL
SELECT 
    'Reseaux' as TableName,
    COUNT(*) as TotalRecords,
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úÖ OK'
        ELSE '‚ùå VIDE'
    END as Status
FROM Reseaux;

PRINT ''
PRINT ' === INSTRUCTIONS ==='
PRINT '1. Si des tables sont vides, ex√©cutez les scripts de remplissage correspondants'
PRINT '2. V√©rifiez que le backend est d√©marr√© et accessible'
PRINT '3. Testez les endpoints API dans l''ordre:'
PRINT '   - GET /api/StatutsAdministratifs'
PRINT '   - GET /api/CategorieCAPs'
PRINT '   - GET /api/CCTs'
PRINT '   - GET /api/Regions'
PRINT '   - GET /api/Villes'
PRINT '   - GET /api/Reseaux'
PRINT ''
PRINT '‚úÖ SCRIPT TERMIN√â !'
GO
