-- =====================================================
-- RECONSTRUCTION COMPL√àTE DE LA TABLE LIGNES
-- Suppression et recr√©ation avec la bonne structure
-- Date: $(Get-Date)
-- =====================================================

USE [CT_CNEH_DB]
GO

PRINT ' === RECONSTRUCTION COMPL√àTE DE LA TABLE LIGNES ==='
PRINT ''

-- √âTAPE 1: Sauvegarder les donn√©es existantes (si n√©cessaire)
PRINT 'üíæ SAUVEGARDE DES DONN√âES EXISTANTES:'
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Lignes')
BEGIN
    -- Cr√©er une table temporaire pour sauvegarder les donn√©es
    IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Lignes_Backup')
        DROP TABLE [Lignes_Backup];
    
    SELECT * INTO [Lignes_Backup] FROM [Lignes];
    PRINT '   ‚úÖ Donn√©es sauvegard√©es dans Lignes_Backup';
END
ELSE
    PRINT '   ‚ÑπÔ∏è  Table Lignes n''existe pas encore';

PRINT ''

-- √âTAPE 2: Supprimer toutes les contraintes et index
PRINT 'üóëÔ∏è SUPPRESSION DES CONTRAINTES ET INDEX:'

-- Supprimer toutes les contraintes FK
DECLARE @sql NVARCHAR(MAX) = '';
SELECT @sql = @sql + 'ALTER TABLE [Lignes] DROP CONSTRAINT [' + name + '];' + CHAR(13)
FROM sys.foreign_keys 
WHERE parent_object_id = OBJECT_ID('Lignes');

IF @sql <> ''
BEGIN
    EXEC sp_executesql @sql;
    PRINT '   ‚úÖ Toutes les contraintes FK supprim√©es';
END
ELSE
    PRINT '   ‚ÑπÔ∏è  Aucune contrainte FK √† supprimer';

-- Supprimer tous les index non-clustered
DECLARE @sql2 NVARCHAR(MAX) = '';
SELECT @sql2 = @sql2 + 'DROP INDEX [' + name + '] ON [Lignes];' + CHAR(13)
FROM sys.indexes 
WHERE object_id = OBJECT_ID('Lignes') AND type_desc = 'NONCLUSTERED' AND name IS NOT NULL;

IF @sql2 <> ''
BEGIN
    EXEC sp_executesql @sql2;
    PRINT '   ‚úÖ Tous les index non-clustered supprim√©s';
END
ELSE
    PRINT '   ‚ÑπÔ∏è  Aucun index non-clustered √† supprimer';

PRINT ''

-- √âTAPE 3: Supprimer la table existante
PRINT 'üóëÔ∏è SUPPRESSION DE LA TABLE EXISTANTE:'
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Lignes')
BEGIN
    DROP TABLE [Lignes];
    PRINT '   ‚úÖ Table Lignes supprim√©e';
END
ELSE
    PRINT '   ‚ÑπÔ∏è  Table Lignes n''existe pas';

PRINT ''

-- √âTAPE 4: Recr√©er la table avec la bonne structure
PRINT 'üèóÔ∏è RECR√âATION DE LA TABLE LIGNES:'

CREATE TABLE [Lignes] (
    [Id] INT IDENTITY(1,1) NOT NULL,
    [NumeroLigne] INT NOT NULL,
    [CategorieId] INT NOT NULL,
    [CCTId] INT NOT NULL,
    [StatutId] INT NOT NULL,
    [DateStatut] DATETIME2 NOT NULL,
    [DecisionId] INT NULL,
    [DateDecision] DATETIME2 NULL,
    [AnneeDemarrage] NVARCHAR(10) NULL,
    [DateCreation] DATETIME2 NOT NULL DEFAULT GETDATE(),
    [DateModification] DATETIME2 NULL,
    CONSTRAINT [PK_Lignes] PRIMARY KEY ([Id])
);

PRINT '   ‚úÖ Table Lignes cr√©√©e avec succ√®s';

-- √âTAPE 5: Cr√©er les contraintes de cl√©s √©trang√®res
PRINT 'üîó CR√âATION DES CONTRAINTES FK:'

-- Contrainte pour CategorieId -> CategorieLignes
ALTER TABLE [Lignes] 
ADD CONSTRAINT [FK_Lignes_CategorieLignes_CategorieId] 
FOREIGN KEY ([CategorieId]) REFERENCES [CategorieLignes]([Id]);
PRINT '   ‚úÖ FK_Lignes_CategorieLignes_CategorieId cr√©√©e';

-- Contrainte pour CCTId -> CCTs
ALTER TABLE [Lignes] 
ADD CONSTRAINT [FK_Lignes_CCTs_CCTId] 
FOREIGN KEY ([CCTId]) REFERENCES [CCTs]([Id]);
PRINT '   ‚úÖ FK_Lignes_CCTs_CCTId cr√©√©e';

-- Contrainte pour StatutId -> StatutLignes
ALTER TABLE [Lignes] 
ADD CONSTRAINT [FK_Lignes_StatutLignes_StatutId] 
FOREIGN KEY ([StatutId]) REFERENCES [StatutLignes]([Id]);
PRINT '   ‚úÖ FK_Lignes_StatutLignes_StatutId cr√©√©e';

-- Contrainte pour DecisionId -> Decisions (optionnelle)
ALTER TABLE [Lignes] 
ADD CONSTRAINT [FK_Lignes_Decisions_DecisionId] 
FOREIGN KEY ([DecisionId]) REFERENCES [Decisions]([Id]);
PRINT '   ‚úÖ FK_Lignes_Decisions_DecisionId cr√©√©e';

PRINT ''

-- √âTAPE 6: Cr√©er les index n√©cessaires
PRINT 'üìä CR√âATION DES INDEX:'

-- Index sur NumeroLigne + CCTId (pour √©viter les doublons)
CREATE UNIQUE INDEX [IX_Lignes_NumeroLigne_CCTId] 
ON [Lignes]([NumeroLigne], [CCTId]);
PRINT '   ‚úÖ Index unique IX_Lignes_NumeroLigne_CCTId cr√©√©';

-- Index sur CategorieId
CREATE INDEX [IX_Lignes_CategorieId] 
ON [Lignes]([CategorieId]);
PRINT '   ‚úÖ Index IX_Lignes_CategorieId cr√©√©';

-- Index sur CCTId
CREATE INDEX [IX_Lignes_CCTId] 
ON [Lignes]([CCTId]);
PRINT '   ‚úÖ Index IX_Lignes_CCTId cr√©√©';

-- Index sur StatutId
CREATE INDEX [IX_Lignes_StatutId] 
ON [Lignes]([StatutId]);
PRINT '   ‚úÖ Index IX_Lignes_StatutId cr√©√©';

PRINT ''

-- √âTAPE 7: V√©rifier la structure finale
PRINT 'üîç V√âRIFICATION DE LA STRUCTURE FINALE:'
SELECT 
    COLUMN_NAME,
    DATA_TYPE,
    IS_NULLABLE,
    ORDINAL_POSITION
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_NAME = 'Lignes' 
ORDER BY ORDINAL_POSITION;

PRINT ''

PRINT 'üîç CONTRAINTES FINALES:'
SELECT 
    fk.name as FK_Name,
    OBJECT_NAME(fk.parent_object_id) as TableName,
    COL_NAME(fkc.parent_object_id, fkc.parent_column_id) as ColumnName,
    OBJECT_NAME(fk.referenced_object_id) as ReferencedTableName,
    COL_NAME(fkc.referenced_object_id, fkc.referenced_column_id) as ReferencedColumnName
FROM sys.foreign_keys fk
INNER JOIN sys.foreign_key_columns fkc ON fk.object_id = fkc.constraint_object_id
WHERE OBJECT_NAME(fk.parent_object_id) = 'Lignes'
ORDER BY fk.name;

PRINT ''

PRINT 'üîç INDEX FINAUX:'
SELECT 
    i.name as IndexName,
    i.type_desc as IndexType,
    i.is_unique as IsUnique
FROM sys.indexes i
WHERE i.object_id = OBJECT_ID('Lignes')
ORDER BY i.name;

PRINT ''
PRINT ' === RECONSTRUCTION TERMIN√âE ==='
PRINT '‚úÖ Table Lignes reconstruite avec succ√®s!'
PRINT 'üìä Colonnes: 11 (structure propre)'
PRINT 'üîó Contraintes: 4 FK + 1 PK'
PRINT 'üìä Index: 4 index optimis√©s'
PRINT 'üéØ Structure: Parfaitement compatible avec le mod√®le C#'
PRINT ''
PRINT 'üí° Note: Les donn√©es ont √©t√© sauvegard√©es dans Lignes_Backup si elles existaient'
GO
